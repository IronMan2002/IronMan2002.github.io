<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2021/01/15/hello-world%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2021/01/15/hello-world%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="1-浏览器内核"><a href="#1-浏览器内核" class="headerlink" title="1.浏览器内核"></a>1.浏览器内核</h2><p>主要浏览器及其内核</p><p>　　（1）trident：国内大多双核浏览器（ie、360急速、百度、猎豹安全、腾讯TT、Avant、世界之窗）的内核</p><p>　　（2）edgeHTmL：IE内核（windows10之后，IE将其内置浏览器命名为Edge）</p><p>　　（3）gecko：Firefox内核（开源，但打开速度慢、升级频繁、需要加载flash）</p><p>　　（4）webkit：Safari内核（苹果公司），代表浏览器：傲游浏览器3、Apple Safari（win/iphone/ipad）、symbian手机浏览器、安卓默认浏览器</p><p>　　（5）blink：谷歌内核（blink是webkit的分支，2013年4月3日，开始使用blink）</p><p>　　（6）presto：opera前任内核（目前已投入使用blink）</p><p>　 3、目前移动设备浏览器常用内核有webkit、blink、trident、gecko：</p><p>　　（1）webkit：iphone和ipad等IOS平台内核，android4.4之前系统浏览器内核</p><p>　　（2）blink：android4.4之后系统浏览器（chromium）内核</p><p>​    （3）trident ：windows phone 8系统浏览器内核</p><h2 id="2-框架"><a href="#2-框架" class="headerlink" title="2.框架"></a>2.框架</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中：lang表示网站语言</p><head></head>代表文件头，包含网站标题及字符集<body></body>代表文档的主体<h2 id="3-元素"><a href="#3-元素" class="headerlink" title="3.元素"></a>3.元素</h2><p>1、标题标签：<h1></h1>到<h6></h6>，依次递减.</p><p>2、段落标签：<p></p></p><p>3、水平线：  <hr />或者<hr/>或者 <hr></p><p>4、链接:    <a href="default.htm"></a></p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h1 id="1-盒子"><a href="#1-盒子" class="headerlink" title="1.盒子"></a>1.盒子</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: lightgrey;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid green;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">25px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>css盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><h2 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h2><p>css选择器用于选择元素的样式的模式。</p><p>1.css属性选择器</p><p>由css命名及后面属性及属性值构成一个完整。<br>代码如下</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">abab&#123;<span class="hljs-string">...</span> <span class="hljs-string">...</span> 属性及值&#125;<br></code></pre></td></tr></table></figure><p>abab被称为css命名名称，<br>而跟后面花括号内容及divcss5一起被称为CSS属性选择器</p><p>2.子选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &gt; <span class="hljs-selector-tag">strong</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;<br></code></pre></td></tr></table></figure><p>选择作为 h1 元素子元素的所有 strong 元素</p><p>3.相邻兄弟选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> + <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">margin-top</span>:<span class="hljs-number">50px</span>;&#125;<br></code></pre></td></tr></table></figure><p>选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素</p><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h2><p><strong>JavaScript数据类型：</strong></p><p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><p>创建数组</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> mycars = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>()</span><br><span class="javascript">mycars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Saab&quot;</span></span><br><span class="javascript">mycars[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Volvo&quot;</span></span><br><span class="javascript">mycars[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;BMW&quot;</span></span><br><br><span class="javascript"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;mycars.length;i++)</span><br>&#123;<br><span class="javascript"><span class="hljs-built_in">document</span>.write(mycars[i] + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>创建,赋值并输出数组</p><h2 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h2><p>在 JavaScript 中，对象是数据（变量），拥有属性和方法。</p><p>1.创建对象</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">var Object=</span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml">;/* 声明对象字面变量*/</span><br><span class="xml">Object.name=&quot;Jener&quot;;/*向对象添加新成员*/</span><br><span class="xml">Object.age=25;</span><br><span class="xml">alert(Object.name);/*利用弹窗输出对象name属性值*/</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2.访问</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">console.log(<span class="hljs-keyword">object</span>.name);<br>        console.log(<span class="hljs-keyword">object</span>[&quot;name&quot;]);<br>        <span class="hljs-keyword">object</span>.name();<br>        <span class="hljs-keyword">object</span>[&quot;name&quot;]();<br></code></pre></td></tr></table></figure><p>读取并访问对象.</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2021/01/07/hello-world%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2021/01/07/hello-world%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="Git的用法"><a href="#Git的用法" class="headerlink" title="Git的用法"></a>Git的用法</h1><h2 id="1-github仓库和账号创建完毕"><a href="#1-github仓库和账号创建完毕" class="headerlink" title="1.github仓库和账号创建完毕"></a>1.github仓库和账号创建完毕</h2><h2 id="2-git版本控制"><a href="#2-git版本控制" class="headerlink" title="2.git版本控制"></a>2.git版本控制</h2><p>操作说明：</p><h3 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git init 初始化仓库<br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">拷贝仓库到本地</span><br></code></pre></td></tr></table></figure><p>此时应在本地创建一个文件夹</p><h3 id="2-提交"><a href="#2-提交" class="headerlink" title="2.提交"></a>2.提交</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> 把文件添加到仓库</span><br>git commit 提交文件<br>git rm 删除文件<br></code></pre></td></tr></table></figure><p>git commit后加-m <xxx>表示提交说明</p><h2 id="3-远程操作"><a href="#3-远程操作" class="headerlink" title="3.远程操作"></a>3.远程操作</h2><h3 id="以ssh协议将GitHub与本地仓库关联"><a href="#以ssh协议将GitHub与本地仓库关联" class="headerlink" title="以ssh协议将GitHub与本地仓库关联"></a>以ssh协议将GitHub与本地仓库关联</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;关联电子邮件&quot;</span><br>创建ssh key命令<br></code></pre></td></tr></table></figure><p>然后在GitHub中关联id_rsa.pub中的公钥</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">$ git remote <span class="hljs-keyword">add</span><span class="bash"> origin git@github.com:IronMan2002/learngit.git</span><br></code></pre></td></tr></table></figure><p>关联仓库</p><h3 id="远程推送命令-git-push"><a href="#远程推送命令-git-push" class="headerlink" title="远程推送命令**git push**"></a>远程推送命令**<em>git push**</em></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> remote 操作远程库<br></code></pre></td></tr></table></figure><p>将文件添加到本地库后</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git push origin <span class="hljs-keyword">master</span> <span class="hljs-title">推送master</span>分支到GitHub<br></code></pre></td></tr></table></figure><p>推送到GitHub</p><h2 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4.分支管理"></a>4.分支管理</h2><p><code>master</code>是主分支，<code>HEAD</code>指向的是当前分支。</p><p>可使用<code>git branch (名称)</code>创建新分支。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/05/hello-world/"/>
    <url>/2021/01/05/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="浅析Mifare1系列RFID卡破解"><a href="#浅析Mifare1系列RFID卡破解" class="headerlink" title="浅析Mifare1系列RFID卡破解"></a>浅析Mifare1系列RFID卡破解</h1><h2 id="M1卡：MIFARE是恩智浦半导体公司（NXP-Semiconductors）拥有的一系列非接触式智能卡和近傍型卡技术的注册商标。"><a href="#M1卡：MIFARE是恩智浦半导体公司（NXP-Semiconductors）拥有的一系列非接触式智能卡和近傍型卡技术的注册商标。" class="headerlink" title="M1卡：MIFARE是恩智浦半导体公司（NXP Semiconductors）拥有的一系列非接触式智能卡和近傍型卡技术的注册商标。"></a>M1卡：<strong>MIFARE</strong>是<a href="https://zh.wikipedia.org/wiki/%E6%81%A9%E6%99%BA%E6%B5%A6%E5%8D%8A%E5%AF%BC%E4%BD%93">恩智浦半导体公司</a>（NXP Semiconductors）拥有的一系列<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E6%8E%A5%E8%A7%A6%E5%BC%8F%E6%99%BA%E8%83%BD%E5%8D%A1">非接触式智能卡</a>和<a href="https://zh.wikipedia.org/wiki/%E8%BF%91%E5%82%8D%E5%9E%8B%E5%8D%A1">近傍型卡</a>技术的注册商标。</h2><p>MIFARE包括一系列依循<a href="https://zh.wikipedia.org/wiki/ISO/IEC_14443">ISO/IEC 14443</a>-A规格，利用<a href="https://zh.wikipedia.org/wiki/%E7%84%A1%E7%B7%9A%E5%B0%84%E9%A0%BB%E8%AD%98%E5%88%A5">无线射频识别</a>（频率为13.56<a href="https://zh.wikipedia.org/wiki/MHz">MHz</a>）的多种非接触式智能卡专有解决方案。这项技术是最早是1994年由<a href="https://zh.wikipedia.org/w/index.php?title=%E7%B1%B3%E5%85%8B%E6%9C%97&action=edit&redlink=1">米克朗</a>集团（Mikron Group）开发，在1998年转售给<a href="https://zh.wikipedia.org/wiki/%E9%A3%9B%E5%88%A9%E6%B5%A6">飞利浦电子公司</a>（2006年更名为恩智浦半导体公司）。近年来MIFARE已经普遍在日常生活当中使用，如大众运输系统付费、商店小额消费、门禁安全系统、借书证等。他们<strong>专有的加密算法</strong>（CRYPTO-1）已经被<strong>反向工程</strong>，并在十年前被研究人员打破。 。</p><h2 id="硬件架构及工作原理"><a href="#硬件架构及工作原理" class="headerlink" title="硬件架构及工作原理"></a>硬件架构及工作原理</h2><table><thead><tr><th>区段</th><th>区块 0</th><th>区块 1</th><th>区块 2</th><th>区块 3</th></tr></thead><tbody><tr><td>0</td><td>制造商代码</td><td>资料区</td><td>资料区</td><td>密钥、访问权限</td></tr><tr><td>1</td><td>资料区</td><td>资料区</td><td>资料区</td><td>密钥、访问权限</td></tr><tr><td>:</td><td>:</td><td>:</td><td>:</td><td>:</td></tr><tr><td>14</td><td>资料区</td><td>资料区</td><td>资料区</td><td>密钥、访问权限</td></tr><tr><td>15</td><td>资料区</td><td>资料区</td><td>资料区</td><td>密钥、访问权限</td></tr></tbody></table><p>来源：<a href="https://zh.wikipedia.org/wiki/MIFARE#%E6%94%BB%E6%93%8A%E4%BA%8B%E4%BB%B6">维基百科</a></p><h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><h3 id="01-读出数据"><a href="#01-读出数据" class="headerlink" title="01.读出数据"></a>01.读出数据</h3><p><img src="https://downloads.acs.com.hk/images/acr122u_2_1.jpg" alt="STD019_ACR122"></p><p>本次使用acr122u在13.56 MHz频段上读取，软件使用基于Linux kali的mfcuk</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">root @ kali：〜＃mfcuk -h</span><br><span class="hljs-attribute">mfcuk-0.3.8</span><br><span class="hljs-attribute">Mifare Classic DarkSide密钥恢复工具-0.3</span><br><span class="hljs-attribute">by Andrei Costin，zveriu@gmail.com，http</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"></span>: //andreicostin.com用法：<br><span class="hljs-literal">-C-要求与阅读器进行显式连接。如果没有此选项，则不会建立连接，也不会进行恢复</span><br><span class="hljs-literal">-i mifare.dmp-装入输入mifare_classic_tag类型转储</span><br><span class="hljs-literal">-I mifare_ext.dmp-装入此工具特定的扩展输入转储，在mifare_classic_tag类型转储之上还有多个字段</span><br><span class="hljs-literal">-o mifare.dmp-将生成的mifare_classic_tag转储输出到给定文件</span><br><span class="hljs-literal">-O mifare_ext.dmp-将生成的扩展转储输出到给定文件</span><br><span class="hljs-literal">-V扇区[：A / B / any_other_alphanum [：fullkey]]-验证指定的密钥部门，-1表示所有部门</span><br>    在指定了第一个分号密钥类型之后：A仅验证密钥A，B仅验证密钥B，其他所有内容验证两个密钥<br>    在指定了第二个分号完整的12个十六进制数字密钥之后-该密钥将覆盖给定扇区的任何已加载的转储密钥）和密钥类型<br><span class="hljs-literal">-R扇区[：A / B / any_other_alphanum]-恢复扇区的密钥，-1表示所有扇区。</span><br>    在指定了第一个分号键类型之后：A仅恢复keyA，B仅恢复keyB，其他任何东西都恢复两个键<br><span class="hljs-literal">-U UID-强制特定的UID。如果使用-i加载了转储，则-U将覆盖加载了转储的内存中的</span><br><span class="hljs-literal">-M标签类型-强制特定标签类型。8是1K，24是4K，32是DESFire</span><br><span class="hljs-literal">-D-对于标记为要验证的扇区和密钥类型，首先使用默认密钥进行验证（也许您很幸运）</span><br><span class="hljs-literal">-d key-指定要检查的其他完整的12进制数字默认密钥。多个-d选项可用于更多其他键</span><br><span class="hljs-literal">-s-SLEEP_AT_FIELD_OFF休眠的毫秒数（默认值：10 ms）</span><br><span class="hljs-literal">-S-SLEEP_AFTER_FIELD_ON休眠的毫秒数（默认值：50 ms）</span><br><span class="hljs-literal">-P hex_literals_separated-尝试从a中恢复密钥Proxmark3（基于mifarecrack.c）嗅到的会话。接受几个选项：</span><br>    以uid：tag_chal：nr_enc：reader_resp：tag_resp形式的十六进制文字格式的串联字符串<br>    示例-P 0x5c72325e：0x50829cd6：0xb8671f76：0xe00eefc9：0x4888964f将找到关键字FFFFFFFFFFFF<br><span class="hljs-literal">-p proxmark3_full.log-尝试自行分析日志文件（基于mifarecrack.py），获取选项-P的值并调用它-F-</span><br>尝试根据已知卡的数据对输入转储（-i）进行指纹识别格式<br><span class="hljs-literal">-v verbose_level-详细级别（默认为O）</span><br><br>使用示例：<br>  恢复所有扇区中的所有密钥：<br>    mfcuk -C -R -1<br>  以250 ms的时间恢复所有延迟的扇区＃0密钥（延迟可能会提供更多结果）：<br>    mfcuk -C -R 0 -s 250 -S 250<br></code></pre></td></tr></table></figure><p>这是kali提供的实例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mfcuk</span> -C -R <span class="hljs-number">0</span>：A<br></code></pre></td></tr></table></figure><p>检索a密钥</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">&gt;</span> <span class="hljs-variable">mfoc</span> <span class="hljs-operator">-</span><span class="hljs-built_in">O</span> <span class="hljs-type">source_dump</span><span class="hljs-operator">.</span><span class="hljs-variable">mfd</span> <span class="hljs-operator">-</span><span class="hljs-variable">k</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">the</span> <span class="hljs-variable">key</span> <span class="hljs-variable">A</span> <span class="hljs-variable">you</span> <span class="hljs-variable">retrieved</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">The</span> <span class="hljs-variable">custom</span> <span class="hljs-variable">key</span> <span class="hljs-number">0</span><span class="hljs-variable">xFFFFFFFFFFFF</span> <span class="hljs-variable">has</span> <span class="hljs-variable">been</span> <span class="hljs-variable">added</span> <span class="hljs-variable">to</span> <span class="hljs-variable">the</span> <span class="hljs-variable">default</span> <span class="hljs-variable">keys</span><br><span class="hljs-variable">Found</span> <span class="hljs-variable">Mifare</span> <span class="hljs-variable">Classic</span> <span class="hljs-number">1</span><span class="hljs-variable">k</span> <span class="hljs-variable">tag</span><br><span class="hljs-variable">ISO</span><span class="hljs-operator">/</span><span class="hljs-variable">IEC</span> <span class="hljs-number">14443</span><span class="hljs-variable">A</span> <span class="hljs-punctuation">(</span><span class="hljs-number">106</span> <span class="hljs-variable">kbps</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">target</span><span class="hljs-operator">:</span><br>    <span class="hljs-variable">ATQA</span> <span class="hljs-punctuation">(</span><span class="hljs-type">SENS_RES</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-number">00</span>  <span class="hljs-number">04</span>  <br><span class="hljs-operator">*</span> <span class="hljs-variable">UID</span> <span class="hljs-variable">size</span><span class="hljs-operator">:</span> <span class="hljs-variable">single</span><br><span class="hljs-operator">*</span> <span class="hljs-variable">bit</span> <span class="hljs-variable">frame</span> <span class="hljs-variable">anticollision</span> <span class="hljs-variable">supported</span><br>       <span class="hljs-variable">UID</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">NFCID1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-variable">ff</span> <span class="hljs-variable">ff</span> <span class="hljs-variable">ff</span> <span class="hljs-variable">ff</span> <br>      <span class="hljs-variable">SAK</span> <span class="hljs-punctuation">(</span><span class="hljs-type">SEL_RES</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-number">08</span>  <br><span class="hljs-operator">*</span> <span class="hljs-built_in">Not</span> <span class="hljs-variable">compliant</span> <span class="hljs-variable">with</span> <span class="hljs-variable">ISO</span><span class="hljs-operator">/</span><span class="hljs-variable">IEC</span> <span class="hljs-number">14443</span><span class="hljs-operator">-</span><span class="hljs-number">4</span><br><span class="hljs-operator">*</span> <span class="hljs-built_in">Not</span> <span class="hljs-variable">compliant</span> <span class="hljs-variable">with</span> <span class="hljs-variable">ISO</span><span class="hljs-operator">/</span><span class="hljs-variable">IEC</span> <span class="hljs-number">18092</span><br><span class="hljs-variable">Fingerprinting</span> <span class="hljs-variable">based</span> <span class="hljs-variable">on</span> <span class="hljs-variable">MIFARE</span> <span class="hljs-variable">type</span> <span class="hljs-variable">Identification</span> <span class="hljs-variable">Procedure</span><span class="hljs-operator">:</span><br><span class="hljs-operator">*</span> <span class="hljs-variable">MIFARE</span> <span class="hljs-variable">Classic</span> <span class="hljs-number">1</span><span class="hljs-built_in">K</span><br><span class="hljs-operator">*</span> <span class="hljs-variable">MIFARE</span> <span class="hljs-built_in">Plus</span> <span class="hljs-punctuation">(</span><span class="hljs-number">4</span> <span class="hljs-built_in">Byte</span> <span class="hljs-variable">UID</span> <span class="hljs-variable">or</span> <span class="hljs-number">4</span> <span class="hljs-built_in">Byte</span> <span class="hljs-variable">RID</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">Security</span> <span class="hljs-variable">level</span> <span class="hljs-number">1</span><br><span class="hljs-operator">*</span> <span class="hljs-variable">SmartMX</span> <span class="hljs-variable">with</span> <span class="hljs-variable">MIFARE</span> <span class="hljs-number">1</span><span class="hljs-built_in">K</span> <span class="hljs-variable">emulation</span><br><span class="hljs-variable">Other</span> <span class="hljs-variable">possible</span> <span class="hljs-variable">matches</span> <span class="hljs-variable">based</span> <span class="hljs-variable">on</span> <span class="hljs-variable">ATQA</span> <span class="hljs-operator">&amp;</span> <span class="hljs-variable">SAK</span> <span class="hljs-variable">values</span><span class="hljs-operator">:</span><br><span class="hljs-variable">Try</span> <span class="hljs-variable">to</span> <span class="hljs-variable">authenticate</span> <span class="hljs-variable">to</span> <span class="hljs-variable">all</span> <span class="hljs-variable">sectors</span> <span class="hljs-variable">with</span> <span class="hljs-variable">default</span> <span class="hljs-variable">keys</span><span class="hljs-operator">...</span><br><span class="hljs-variable">Symbols</span><span class="hljs-operator">:</span> <span class="hljs-operator">&#x27;.&#x27;</span> <span class="hljs-variable">no</span> <span class="hljs-variable">key</span> <span class="hljs-variable">found</span><span class="hljs-operator">,</span> <span class="hljs-operator">&#x27;/&#x27;</span> <span class="hljs-variable">A</span> <span class="hljs-variable">key</span> <span class="hljs-variable">found</span><span class="hljs-operator">,</span> <span class="hljs-operator">&#x27;</span>\<span class="hljs-operator">&#x27;</span> <span class="hljs-variable">B</span> <span class="hljs-variable">key</span> <span class="hljs-variable">found</span><span class="hljs-operator">,</span> <span class="hljs-operator">&#x27;</span><span class="hljs-variable">x</span><span class="hljs-operator">&#x27;</span> <span class="hljs-variable">both</span> <span class="hljs-variable">keys</span> <span class="hljs-variable">found</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">xxxxxxxxxxxxxxxx</span><span class="hljs-punctuation">]</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">00</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">01</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">02</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">03</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">04</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">05</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">06</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">07</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">08</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">09</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">10</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">11</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">12</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">13</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">14</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">15</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br></code></pre></td></tr></table></figure><p>这里应该要安装一下mfoc，但kali也有预装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">hexdump</span> <span class="hljs-selector-tag">-C</span> <span class="hljs-selector-tag">source_dump</span><span class="hljs-selector-class">.mfd</span><br></code></pre></td></tr></table></figure><p>使用十六进制格式查看已经转储的文件</p><h3 id="02-转储数据写卡"><a href="#02-转储数据写卡" class="headerlink" title="02.转储数据写卡"></a>02.转储数据写卡</h3><p>改写之前的卡</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">mfoc -O dest.mfd <br>mfoc -O dest.mfd -k <span class="hljs-comment">&#123;the A key&#125;</span> <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nfc</span>-mfclassic w a dest.mfd source_dump.mfd<br><span class="hljs-attribute">NFC</span> reader: ACS / ACR<span class="hljs-number">122</span>U PICC Interface opened<br><span class="hljs-attribute">Found</span> MIFARE Classic card:<br><span class="hljs-attribute">ISO</span>/IEC <span class="hljs-number">14443</span>A (<span class="hljs-number">106</span> kbps) target:<br>    <span class="hljs-attribute">ATQA</span> (SENS_RES): <span class="hljs-number">00</span>  <span class="hljs-number">04</span>  <br>       <span class="hljs-attribute">UID</span> (NFCID<span class="hljs-number">1</span>): <span class="hljs-number">73</span>  <span class="hljs-number">98</span>  <span class="hljs-number">96</span>  d<span class="hljs-number">5</span>  <br>      <span class="hljs-attribute">SAK</span> (SEL_RES): <span class="hljs-number">08</span>  <br><span class="hljs-attribute">Guessing</span> size: seems to be a <span class="hljs-number">1024</span>-byte card<br><span class="hljs-attribute">Writing</span> <span class="hljs-number">64</span> blocks |x<br></code></pre></td></tr></table></figure><p>即可转储至新RFID卡中。</p><h3 id="03-数据分析"><a href="#03-数据分析" class="headerlink" title="03.数据分析"></a>03.数据分析</h3><p>离线小额支付（水卡等）的金额位一般是十进制对应的16进制数倒位，或对应的二进制数去补码再转化为16进制。基本前后对照都能看出。各个厂商的方式不同，并且有关支付的破解操作有法律风险，故不再深入破解。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​        acr122u与kali mfcuk的组合。基本可以实现市面上大多数半加密卡和部分全加密卡的密钥破解，数据读取和复制。而对于部分不在0扇区存储密钥的全加密卡，则需要通过Proxmark3等嗅探得到数据。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
