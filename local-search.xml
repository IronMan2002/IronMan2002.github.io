<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>语言基础</title>
    <link href="/2021/09/07/base%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2021/09/07/base%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1>        <div id="aplayer-zfAuBbdD" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content">[ti:心臓を捧げよ! (献出心脏！)][ar:Linked Horizon][al:進撃の軌跡 (进击的轨迹)][by:][offset:0][kana:1しん1ぞう1ささ11111し1きょく1い1じょう1じ1ごく1な1しん1じん1るい1さい1あく1ひ1とう1とつ1とびら1たた1おと1た1ひど1む1さ1ほう1まね1さい1やく1ひ1あく1む1す1ひ1うら1ぎ1もの1やつ1ら1く1ちく1てき1ひ1かお1ひとみ1おれ1たち1み1なに1す1あく1ま1しの1いのち1たましい1けっ1お1ささ1ささ1しん1ぞう1ささ1すべ1ぎ1せい1いま2とき1ささ1ささ1しん1ぞう1ささ1すす1み1らい1て1き1ひら1す1ひ1いつわ1もの1やつ1ら1ぞう1お1てき1ひ1こえ1こと1ば1おれ1かた1なに1まな1あく1ま1ほふ1ぎ1じゅつ1せん1じゅつ1すべ1む1だ1ささ1ささ1しん1ぞう1ささ1すべ1ど1りょく1いま2とき1ため1ささ1ささ1しん1ぞう1ささ1うた1しょう1り1て1つか1と1え1たい1し1ば1もの2ひと1に1つら1よ1いっ1ぴき1のこ1やつ1く1ちく1さい1しょ1い1だ1だれ1こと1おぼ1わす1いか1かなら1く1ちく1あ1あ1えら1く1みち1さき2ばしょ1つな1ただ1ささ2いのち1かて1さ1とうと1ひ1がん1ひ1がん1しょう1り1やく1そく1ち1らく1えん1は1ひ1じん1るい1おも1だ1し1はい1きょう1ふ1とり1かご1なか1とら1くつ1じょく2たそがれ1ゆみ1や1かけ1つばさ1せ1お1き1せき1じ1ゆう1みち1ささ1ささ1しん1ぞう1ささ1すべ1く1なん1いま2とき1ため1ささ1ささ1しん1ぞう1ささ1はかな1いのち1も1ゆみ1や1か1ささ1ささ1しん1ぞう1ささ1ほこ1き1せき1み1えが1だ][00:00.00]心臓を捧げよ! (献出心脏！) - Linked Horizon[00:05.82]词：Revo[00:06.85]曲：Revo[00:08.31]これ以上の地獄は[00:11.14]無いだろうと信じたかった[00:14.13]されど人類最悪の日は[00:17.09]いつも唐突に[00:20.20]扉を叩く音は[00:23.15]絶えず酷く無作法で[00:26.22]招かれざる災厄の灯は[00:29.16]悪夢のように[00:32.38]過ぎし日を裏切る者[00:35.34]奴等は駆逐すべき敵だ[00:38.34]あの日どんな顔で 瞳で[00:41.33]俺達を見つめていた[00:44.33]何を捨てれば悪魔をも凌げる？[00:47.55]命さえ 魂さえ[00:50.12]決して惜しくなどはない[00:53.17]捧げよ 捧げよ 心臓を捧げよ[00:59.21]全ての犠牲は[01:02.23]今この瞬間のために[01:05.21]捧げよ 捧げよ 心臓を捧げよ[01:11.18]進むべき未来を[01:14.16]その手で切り拓け[01:30.94]過ぎし日を偽る者[01:33.86]奴等は憎悪すべき敵だ[01:36.86]あの日どんな声で 言葉で[01:39.86]俺たちを騙っていた[01:42.81]何を学べば悪魔をも屠れる？[01:46.06]技術でも 戦術でも[01:48.57]全て無駄になどしない[01:51.65]捧げよ 捧げよ 心臓を捧げよ[01:57.65]全ての努力は 今この瞬間の為に[02:03.68]捧げよ 捧げよ 心臓を捧げよ[02:09.70]謳うべき勝利を その手で掴み取れ[02:29.49]得体の知れない化け物が[02:32.24]人間と似た顔をしてやがる[02:35.29]この世から一匹残らず[02:38.10]奴らを駆逐してやる[02:41.38]最初に言い出したのは誰か？[02:44.38]そんな事憶えちゃいないが[02:47.38]忘れられない怒りがある[02:50.18]必ず駆逐してやる[02:53.09]嗚呼 選び悔いた道の先は[02:56.30]どんな景色に繋がっている？[02:59.16]唯 捧れられた人生を糧に咲く[03:02.74]尊き彼岸(悲願)の勝利(Sieg)[03:05.32]約束の地は楽園の果て[04:23.39]あの日 人類は思い出した[04:26.15]ヤツラに支配されていた恐怖を[04:29.88]鳥籠の中に囚われていた屈辱を[04:35.32]黄昏を弓矢は翔る 翼を背負い[04:41.14]その軌跡が自由への 道となる[04:48.93]捧げよ 捧げよ 心臓を捧げよ[04:55.42]全ての苦難は 今この瞬間の為に[05:01.39]捧げよ 捧げよ 心臓を捧げよ[05:07.43]儚き命を 燃える弓矢に変えて[05:13.42]捧げよ 捧げよ 心臓を捧げよ[05:19.40]誇るべき軌跡を その身で描き出せ</pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-zfAuBbdD"),            narrow: false,            autoplay: false,            showlrc: 2,            music: {              title: "心臓を捧げよ___献出心脏",              author: "Linked_Horizon",              url: "b.mp3",              pic: "/2021/09/07/base%20-%20副本/b.jpg",              lrc: "b.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一封信</title>
    <link href="/2021/08/12/zz/"/>
    <url>/2021/08/12/zz/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在1987年，有个叫Darrell的英国小孩给当时还是担任首相的敦马写了封信。</p><p>小男孩说：他长大后想研究热带雨林的动物。但如果马来西亚继续让那些伐木公司继续伐木，千千万万的动物会死亡。而这一切只是为了让有钱人赚钱。</p><p>以下是时任马来西亚首相的马哈蒂尔的回信</p><p>亲爱的Darrell：</p><p>其实你被大人利用来羞辱我们只因为我们在自己的森林里砍伐树桐，这也不是件光彩的事。</p><p>其实这不是因为有个人赚了百万英镑的问题。你知道吗？每砍一棵树可以提供10个人的工作机会，而这些人可以养活他们的妻子和孩子。</p><p>那个有钱人必须付40%的税，如果没有这个有钱人，将不会有伐木活动，而且很多人会没有工作。</p><p>再说这个有钱人还会再投资或纯粹消费，不管他是再投资或消费，很多人都会得益，要不然人民会更穷。</p><p>政府收到这些税，也会善用来提供教育、保健和其他服务给那些穷苦的人民。</p><p>伐木这行业帮助了在马来西亚成千上万的穷苦人民。</p><p>就为了让你可以研究热带动物，这些人必须继续挨饿吗？</p><p>是不是你的学习比这些穷人饿著肚子更重要呢？就为了你要研究热带动物，马来西亚就要损失几百万或更多英镑？</p><p>当英国统治马来西亚时，他们烧掉几百万亩的森林只为了种植橡胶树，那些被砍掉的木材就这样被浪费掉，因为那时候没有人要买马来西亚的木材。</p><p>甚至因为焚烧这些木材而导致成千上万的动物死亡。</p><p>这些被砍掉的树对马来西亚一点好处都没有。即使后来树胶有了收成，利益都是送回去英国。你爸爸的爸爸所做过的事，才是不见得光彩。</p><p>如果你不希望我们砍伐我们的森林，那就告诉你爸爸，叫他去跟那些富有的国家说，包括英国在内，付更多的钱来买我们的木材。那么我们就少砍点树，转而创造其他的工作机会给我们的人民。</p><p>如果你是真的对研究热带动物很感兴趣，我们有很大的国家公园，国家公园是不允许砍伐树木和杀害动物的。</p><p>我们其实也不是统统树都砍，我们只是砍已经成长的大树而已，我们也重新栽种树木。</p><p>我希望你能转告那些利用你的大人有关事情的真相。<br>他们不要太过自以为是比别人更加懂得治理一个国家。<br>他们应该去驱赶住在英国郊外的人，让森林重新生长，让更多的野狼和灰熊能继续繁殖更多，好让你研究热带动物之前，可以先研究野狼和灰熊。</p><p>我认为小孩是应该认识更多动物和爱护他们。不过大人不应该教导小孩对大人如此无礼。</p><p>马哈迪医生 上。</p><p><img src="https://i.loli.net/2021/08/12/PQAthojlkZ3SCGY.png" alt="马哈蒂尔的回信"></p><p><img src="https://i.loli.net/2021/08/12/8F9Q5Nk237VqTxb.png" alt="*弗拉基米尔·伊里奇·乌里扬诺夫同志"></p>]]></content>
    
    
    <categories>
      
      <category>历史</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>语言基础</title>
    <link href="/2021/08/11/base/"/>
    <url>/2021/08/11/base/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h1><h2 id="一，P1035-NOIP2002-普及组-级数求和"><a href="#一，P1035-NOIP2002-普及组-级数求和" class="headerlink" title="一，P1035 [NOIP2002 普及组] 级数求和"></a>一，P1035 [NOIP2002 普及组] 级数求和</h2><p>讲真这一题第一次没有ac属实不应该，float的精度问题让几个数据没过，还是用double比较好。用最基础的遍历，ac代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> a,b=<span class="hljs-number">0</span>,c=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; b &lt; a; ++i) &#123;<br>        b=b+<span class="hljs-number">1</span>/i;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>记一个数学题解</p><p><strong>数论（调和级数）</strong></p><p>关于<strong>调和级数</strong>的姿势，点<a href="https://baike.baidu.com/item/%E8%B0%83%E5%92%8C%E7%BA%A7%E6%95%B0/8019971?fr=aladdin">这里</a>。</p><p><img src="https://i.loli.net/2021/08/13/OZmswkM6uBzeGhq.png"></p><p>关于<em>γ</em>（<strong>欧拉-马歇罗尼常数</strong>）的姿势，点<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%B8%B8%E6%95%B0/5371177?fr=aladdin">这里</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> gamma=<span class="hljs-number">0.5772156649</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> k,n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>    n=<span class="hljs-built_in">exp</span>(k-gamma)+<span class="hljs-number">0.5</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>空间复杂度O(1)<em>O</em>(1)</p><p>时间复杂度O(???)<em>O</em>(???)</p><p>（因为不知道math.h头文件中的<strong>exp函数</strong>的时间复杂度，所以不知道时间复杂度）</p><h2 id="二，P1307-NOIP2011-普及组-数字反转"><a href="#二，P1307-NOIP2011-普及组-数字反转" class="headerlink" title="二，P1307 [NOIP2011 普及组] 数字反转"></a>二，P1307 [NOIP2011 普及组] 数字反转</h2><p>换位输出，挺聪明伐。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,s=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><span class="hljs-comment">//以上应该都懂，不解释</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<span class="hljs-comment">//烦死了输入</span><br>    <span class="hljs-keyword">while</span>(n) s=s*<span class="hljs-number">10</span>+n%<span class="hljs-number">10</span>,n/=<span class="hljs-number">10</span>;<span class="hljs-comment">//如果n不是0，就一直s让一位，腾个0出来，n最后一位跟上去，再无情地抛弃了最后一位（突然想对n说：你无情你冷酷你无理取闹！）</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;s;<span class="hljs-comment">//烦死了输出</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再记录一种字符串操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">string</span> s1,s2;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><span class="hljs-comment">//不解释</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;s1;<br>    <span class="hljs-keyword">if</span>(s1[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;-&quot;</span>;<span class="hljs-comment">//输出负号</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=s1.length()<span class="hljs-number">-1</span>,j=<span class="hljs-number">0</span>;i&gt;=<span class="hljs-number">1</span>;i--,j++) s2=s2+s1[i];<span class="hljs-comment">//倒着变成正的（好烦）</span><br>        <span class="hljs-keyword">if</span>(s2[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;0&#x27;</span>) s2.erase(<span class="hljs-number">0</span>,s2.find_first_not_of(<span class="hljs-string">&#x27;0&#x27;</span>));<span class="hljs-comment">//去0</span><br>        <span class="hljs-built_in">cout</span>&lt;&lt;s2;<span class="hljs-comment">//输出</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">//否则为正</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=s1.length()<span class="hljs-number">-1</span>,j=<span class="hljs-number">0</span>;i&gt;=<span class="hljs-number">0</span>;i--,j++) s2=s2+s1[i];<span class="hljs-comment">//正着倒序（还是好烦吧）</span><br>        <span class="hljs-keyword">if</span>(s2[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;0&#x27;</span>)s2.erase(<span class="hljs-number">0</span>,s2.find_first_not_of(<span class="hljs-string">&#x27;0&#x27;</span>));<span class="hljs-comment">//删除0</span><br>        <span class="hljs-built_in">cout</span>&lt;&lt;s2;<span class="hljs-comment">//输出</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//终于结束了</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/ylwn817/articles/1967689.html">C++中string erase函数的使用(转载)</a></p><p>erase函数的原型如下：<br>（1）string&amp; erase ( size_t pos = 0, size_t n = npos );<br>（2）iterator erase ( iterator position );<br>（3）iterator erase ( iterator first, iterator last );<br>也就是说有三种用法：<br>（1）erase(pos,n); 删除从pos开始的n个字符，比如erase(0,1)就是删除第一个字符<br>（2）erase(position);删除position处的一个字符(position是个string类型的迭代器)<br>（3）erase(first,last);删除从first到last之间的字符（first和last都是迭代器）<br>下面给你一个例子：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">str</span> <span class="hljs-params">(<span class="hljs-string">&quot;This is an example phrase.&quot;</span>)</span></span>;<br>  <span class="hljs-built_in">string</span>::iterator it;<br><br>  <span class="hljs-comment">// 第(1)种用法</span><br>  str.erase (<span class="hljs-number">10</span>,<span class="hljs-number">8</span>);<br>  <span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-comment">// &quot;This is an phrase.&quot;</span><br><br>  <span class="hljs-comment">// 第(2)种用法</span><br>  it=str.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">9</span>;<br>  str.erase (it);<br>  <span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-comment">// &quot;This is a phrase.&quot;</span><br><br>  <span class="hljs-comment">// 第(3)种用法</span><br>  str.erase (str.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">5</span>, str.<span class="hljs-built_in">end</span>()<span class="hljs-number">-7</span>);<br>  <span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-comment">// &quot;This phrase.&quot;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1、find_first_of()函数</strong></p><p>正向查找在原字符串中第一个与指定字符串（或字符）中的某个字符匹配的字符，返回它的位置。若查找失败，则返回npos。（npos定义为保证大于任何有效下标的值。）</p><p>string str=“abcdefab”;<br>cout&lt;&lt;str.find_first_of(“hce”)&lt;&lt;endl;//待查串hce第一个出现在原串str中的字符是c，返回str中c的下标2,故结果为2。第二个参数为0，默认从原串下标为0开始正向查。<br>cout&lt;&lt;str.find_first_of(“ab”,1)&lt;&lt;endl;//从下标为1开始查，待查串ab第一个出现在原串str中的字符是b，返回b的下标，结果为1。</p><p><strong>2、find_last_of()函数</strong></p><p>逆向查找在原字符串中最后一个与指定字符串（或字符）中的某个字符匹配的字符，返回它的位置。若查找失败，则返回npos。（npos定义为保证大于任何有效下标的值。）</p><p>string str=“abcdefab”;<br>cout&lt;&lt;str.find_last_of(“wab”)&lt;&lt;endl;//原串最后一个字符首先与待查子串的每一个字符一一比较，一旦有相同的就输出原串该字符的下标.。结果为b的下标7。第二个参数为0，默认为npos。<br>cout&lt;&lt;str.find_last_of(“wab”,5)&lt;&lt;endl;//从原串中下标为5开始逆向查找，首先f与待查子串每一字符比较，若有相同的就输出该字符在原串的下标。若一个都没有，就依次逆向比较，即e再与待查子串一一比较，直到原串的b与待查子串中的b相同，然后输出该b在原串的下标1。</p><p><strong>3、find_first_not_of()函数</strong></p><p><strong>正向查找在原字符串中第一个与指定字符串（或字符）中的任一字符都不匹配的字符，返回它的位置。若查找失败，则返回npos。（npos定义为保证大于任何有效下标的值。）</strong></p><ul><li>string str=“abcdefab”;</li><li>cout&lt;&lt;str.find_first_not_of(‘h’)&lt;&lt;endl;//第二个参数为0,默认从原串下标为0开始查找。第一个a就和带查字符不同，故输出a的下标0。</li><li>cout&lt;&lt;str.find_first_not_of(“twj”,1)&lt;&lt;endl;//从下标为1开始查，第一个b就和待查子串任一字符不同，故输出b的下标1。</li></ul><p><strong>4、find_last_not_of()函数</strong></p><p><strong>正向查找在原字符串中最后一个与指定字符串（或字符）中的任一字符都不匹配的字符，返回它的位置。若查找失败，则返回npos。（npos定义为保证大于任何有效下标的值。）</strong></p><ul><li>string str=“abcdefab”;</li><li>cout&lt;&lt;str.find_last_not_of(‘h’)&lt;&lt;endl;//第二个参数为0，默认从npos逆向查。原串倒数第一个字符b和h就不同，故输出b的小标7。</li><li>cout&lt;&lt;str.find_last_not_of(“ab”,6)&lt;&lt;endl;//从原串下标为6开始逆向查询，第一个a和待查串中的字符a相同，不符合，故继续逆向比较。f和待查子串任一字符不同，故输出f的下标5。</li></ul>        <div id="aplayer-acCFZAJQ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content">[ti:心臓を捧げよ! (献出心脏！)][ar:Linked Horizon][al:進撃の軌跡 (进击的轨迹)][by:][offset:0][kana:1しん1ぞう1ささ11111し1きょく1い1じょう1じ1ごく1な1しん1じん1るい1さい1あく1ひ1とう1とつ1とびら1たた1おと1た1ひど1む1さ1ほう1まね1さい1やく1ひ1あく1む1す1ひ1うら1ぎ1もの1やつ1ら1く1ちく1てき1ひ1かお1ひとみ1おれ1たち1み1なに1す1あく1ま1しの1いのち1たましい1けっ1お1ささ1ささ1しん1ぞう1ささ1すべ1ぎ1せい1いま2とき1ささ1ささ1しん1ぞう1ささ1すす1み1らい1て1き1ひら1す1ひ1いつわ1もの1やつ1ら1ぞう1お1てき1ひ1こえ1こと1ば1おれ1かた1なに1まな1あく1ま1ほふ1ぎ1じゅつ1せん1じゅつ1すべ1む1だ1ささ1ささ1しん1ぞう1ささ1すべ1ど1りょく1いま2とき1ため1ささ1ささ1しん1ぞう1ささ1うた1しょう1り1て1つか1と1え1たい1し1ば1もの2ひと1に1つら1よ1いっ1ぴき1のこ1やつ1く1ちく1さい1しょ1い1だ1だれ1こと1おぼ1わす1いか1かなら1く1ちく1あ1あ1えら1く1みち1さき2ばしょ1つな1ただ1ささ2いのち1かて1さ1とうと1ひ1がん1ひ1がん1しょう1り1やく1そく1ち1らく1えん1は1ひ1じん1るい1おも1だ1し1はい1きょう1ふ1とり1かご1なか1とら1くつ1じょく2たそがれ1ゆみ1や1かけ1つばさ1せ1お1き1せき1じ1ゆう1みち1ささ1ささ1しん1ぞう1ささ1すべ1く1なん1いま2とき1ため1ささ1ささ1しん1ぞう1ささ1はかな1いのち1も1ゆみ1や1か1ささ1ささ1しん1ぞう1ささ1ほこ1き1せき1み1えが1だ][00:00.00]心臓を捧げよ! (献出心脏！) - Linked Horizon[00:05.82]词：Revo[00:06.85]曲：Revo[00:08.31]これ以上の地獄は[00:11.14]無いだろうと信じたかった[00:14.13]されど人類最悪の日は[00:17.09]いつも唐突に[00:20.20]扉を叩く音は[00:23.15]絶えず酷く無作法で[00:26.22]招かれざる災厄の灯は[00:29.16]悪夢のように[00:32.38]過ぎし日を裏切る者[00:35.34]奴等は駆逐すべき敵だ[00:38.34]あの日どんな顔で 瞳で[00:41.33]俺達を見つめていた[00:44.33]何を捨てれば悪魔をも凌げる？[00:47.55]命さえ 魂さえ[00:50.12]決して惜しくなどはない[00:53.17]捧げよ 捧げよ 心臓を捧げよ[00:59.21]全ての犠牲は[01:02.23]今この瞬間のために[01:05.21]捧げよ 捧げよ 心臓を捧げよ[01:11.18]進むべき未来を[01:14.16]その手で切り拓け[01:30.94]過ぎし日を偽る者[01:33.86]奴等は憎悪すべき敵だ[01:36.86]あの日どんな声で 言葉で[01:39.86]俺たちを騙っていた[01:42.81]何を学べば悪魔をも屠れる？[01:46.06]技術でも 戦術でも[01:48.57]全て無駄になどしない[01:51.65]捧げよ 捧げよ 心臓を捧げよ[01:57.65]全ての努力は 今この瞬間の為に[02:03.68]捧げよ 捧げよ 心臓を捧げよ[02:09.70]謳うべき勝利を その手で掴み取れ[02:29.49]得体の知れない化け物が[02:32.24]人間と似た顔をしてやがる[02:35.29]この世から一匹残らず[02:38.10]奴らを駆逐してやる[02:41.38]最初に言い出したのは誰か？[02:44.38]そんな事憶えちゃいないが[02:47.38]忘れられない怒りがある[02:50.18]必ず駆逐してやる[02:53.09]嗚呼 選び悔いた道の先は[02:56.30]どんな景色に繋がっている？[02:59.16]唯 捧れられた人生を糧に咲く[03:02.74]尊き彼岸(悲願)の勝利(Sieg)[03:05.32]約束の地は楽園の果て[04:23.39]あの日 人類は思い出した[04:26.15]ヤツラに支配されていた恐怖を[04:29.88]鳥籠の中に囚われていた屈辱を[04:35.32]黄昏を弓矢は翔る 翼を背負い[04:41.14]その軌跡が自由への 道となる[04:48.93]捧げよ 捧げよ 心臓を捧げよ[04:55.42]全ての苦難は 今この瞬間の為に[05:01.39]捧げよ 捧げよ 心臓を捧げよ[05:07.43]儚き命を 燃える弓矢に変えて[05:13.42]捧げよ 捧げよ 心臓を捧げよ[05:19.40]誇るべき軌跡を その身で描き出せ</pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-acCFZAJQ"),            narrow: false,            autoplay: false,            showlrc: 2,            music: {              title: "心臓を捧げよ___献出心脏",              author: "Linked_Horizon",              url: "b.mp3",              pic: "/2021/08/11/base/b.jpg",              lrc: "b.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ICPC_ACM</title>
    <link href="/2021/08/10/title/"/>
    <url>/2021/08/10/title/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="新开一篇blog，记录一下学习算法的历程，希望能坚持下去。"><a href="#新开一篇blog，记录一下学习算法的历程，希望能坚持下去。" class="headerlink" title="新开一篇blog，记录一下学习算法的历程，希望能坚持下去。"></a>新开一篇blog，记录一下学习算法的历程，希望能坚持下去。</h1><h1 id="加油！！！"><a href="#加油！！！" class="headerlink" title="加油！！！"></a>加油！！！</h1><p><img src="https://i.loli.net/2021/08/09/hpSaBn3TKA9iDE6.jpg" alt="wallhaven-wyrkpx"></p><a class="btn" href="url"  title="title" target="_blank">text</a>        <div id="aplayer-LzoTvTIY" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content">[ti:残酷な天使のテーゼ (Cruel Angel's Thesis) (Ambivalence Mix) (《新世纪福音战士》TV动画片头曲)][ar:高橋洋子 (たかはし ようこ)][al:&#12316;refrain&#12316;][by:][offset:0][kana:1ざん1こく1てん1し1たか1はし1よう1こ1し1おい1かわ1ね1こ1きょく1さ1とう1ひで1とし1ざん1こく1てん1し1しょう1ねん1しん1わ1あお1かぜ1むね1たた1わたし1み1ほほ1え1む1ちゅう1うん1めい1し1ひとみ1き1づ1せ1なか1はる1み1らい1は1ね1ざん1こく1てん1し1まど1べ1と1た1あつ1おも1で1うら1ぎ2そら1だ1かがや1しょう1ねん1しん1わ1ねむ1わたし1あい1ゆ1ゆめ1し1しゃ1よ1あさ1ほそ1くび1すじ1つき1うつ1せ1かい1じゅう1とき1と1と1あ1い1み1わたし1じ1ゆう1し1ざん1こく1てん1し1かな1だ1いのち1ゆめ1め1ざ1だれ1ひかり1はな1しょう1ねん1しん1わ1ひと1あい1れき1し1め1がみ1わたし1い1ざん1こく1てん1し1まど1べ1と1た1あつ1おも1で1うら1ぎ2そら1だ1かがや1しょう1ねん1しん1わ][00:00.00]残酷な天使のテーゼ (Cruel Angel's Thesis) (Ambivalence Mix) - 高橋洋子 (たかはし ようこ)[00:00.37]词：及川眠子[00:00.46]曲：佐藤英敏[00:00.58]残酷な天使のように[00:06.43]少年よ 神話になれ[00:22.28]蒼い風がいま[00:25.39]胸のドアを叩いても[00:29.10]私だけをただ見つめて[00:32.89]微笑んでるあなた[00:37.27]そっとふれるもの[00:40.29]もとめることに夢中で[00:44.07]運命さえまだ知らない[00:47.88]いたいけな瞳[00:51.79]だけどいつか気付くでしょう[00:55.54]その背中には[00:59.30]遥か未来 めざすための[01:03.05]羽根があること[01:06.65]残酷な天使のテーゼ[01:10.56]窓辺からやがて飛び立つ[01:14.26]ほとばしる熱いパトスで[01:18.04]思い出を裏切るなら[01:21.71]この宇宙を抱いて輝く[01:25.55]少年よ 神話になれ[02:14.65]ずっと眠ってる[02:17.76]私の愛の揺りかご[02:21.46]あなただけが 夢の使者に[02:25.27]呼ばれる朝がくる[02:29.69]細い首筋を[02:32.75]月あかりが映してる[02:36.50]世界中の時を止めて[02:40.26]閉じこめたいけど[02:44.16]もしもふたり逢えたことに[02:47.94]意味があるなら[02:51.69]私はそう 自由を知る[02:55.50]ためのバイブル[02:59.09]残酷な天使のテーゼ[03:02.88]悲しみがそしてはじまる[03:06.69]抱きしめた命のかたち[03:10.46]その夢に目覚めたとき[03:14.12]誰よりも光を放つ[03:17.86]少年よ 神話になれ[03:21.63]人は愛をつむぎながら[03:25.42]歴史をつくる[03:29.15]女神なんてなれないまま[03:32.94]私は生きる[03:36.60]残酷な天使のテーゼ[03:40.36]窓辺からやがて飛び立つ[03:44.12]ほとばしる熱いパトスで[03:47.88]思い出を裏切るなら[03:51.61]この宇宙を抱いて輝く[03:55.24]少年よ 神話になれ</pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-LzoTvTIY"),            narrow: false,            autoplay: false,            showlrc: 2,            music: {              title: "残酷な天使のテーゼ",              author: "高橋洋子 (たかはし ようこ)",              url: "a.mp3",              pic: "/2021/08/10/title/a.jpg",              lrc: "c.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PID</title>
    <link href="/2021/05/22/hello-world%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2021/05/22/hello-world%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>网上关于<code>PID</code>算法的文章很多，但是感觉有必要自己再进行一次总结，抽丝剥茧地重新认识了一下<code>PID</code>；</p></blockquote><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a><strong>1 前言</strong></h2><p>控制系统通常根据有没有反馈会分为开环系统和闭环系统，在闭环系统的控制中，<code>PID</code>算法非常强大，其三个部分分别为；</p><ul><li><code>P</code>：比例环节；</li><li><code>I</code>：积分环节；</li><li><code>D</code>：微分环节；</li></ul><p><code>PID</code>算法可以自动对控制系统进行准确且迅速的校正，因此被广泛地应用于工业控制系统。</p><h2 id="2-开环控制"><a href="#2-开环控制" class="headerlink" title="2 开环控制"></a><strong>2 开环控制</strong></h2><p>首先来看开环控制系统，如下图所示，隆哥<strong>蒙着眼</strong>，需要走到<strong>虚线旗帜</strong>所表示的目标位置，由于缺少反馈（眼睛可以感知当前距离和位置，由于眼睛被蒙上没有<strong>反馈</strong>，所以这也是一个<strong>开环系统</strong>），最终隆哥会较大概率偏离预期的目标，可能会运行到途中<strong>实线旗帜</strong>所表示的位置。</p><p><img src="https://pic2.zhimg.com/80/v2-43ea74ffc433a68f4a57acb1a018b4cd_1440w.jpg" alt="img"></p><p>开环系统的整体结构如下所示；</p><p><img src="https://pic4.zhimg.com/80/v2-70df67003dd81f51d2bfb8945201587f_1440w.png" alt="img"></p><p>这里做一个不是很恰当的比喻；</p><ul><li><code>Input</code>：告诉隆哥目标距离的直线位置（<strong>10米</strong>）；</li><li><code>Controller</code>：隆哥大脑中计算出到达目标所需要<strong>走多少步</strong>；</li><li><code>Process</code>：双腿作为执行机构，输出了相应的步数，但是最终仍然偏离了目标；</li></ul><p>看来没有反馈的存在，很难准确到达目标位置。</p><h2 id="3-闭环控制"><a href="#3-闭环控制" class="headerlink" title="3 闭环控制"></a><strong>3 闭环控制</strong></h2><p>所以为了准确到达目标位置，这里就需要引入反馈，具体如下图所示；</p><p><img src="https://pic1.zhimg.com/80/v2-e1eafc2a9ff148a65c273f090487a1c4_1440w.jpg" alt="img"></p><p>在这里继续举个不怎么恰当的比喻；隆哥重获光明之后，基本可以看到目标位置了；</p><ul><li>第一步<code>Input</code>：告诉隆哥目标距离的直线位置（<strong>10米</strong>）；</li><li>第二步<code>Controller</code>：隆哥大脑中计算出到达目标所需要<strong>走多少步</strong>；</li><li>第三步<code>Process</code>：双腿作为执行机构，输出了相应的步数，但是最终仍然偏离了目标；</li><li>第四步<code>Feedback</code>：<strong>通过视觉获取到目前已经前进的距离</strong>，（比如<strong>前进了2米</strong>，那么还有<strong>8米的偏差</strong>）；</li><li>第五步<code>err</code>：根据<strong>偏差重新计算所需要的步数</strong>，然后重复上述四个步骤，最终隆哥达到最终的目标位置。</li></ul><h2 id="4-PID"><a href="#4-PID" class="headerlink" title="4 PID"></a><strong>4 PID</strong></h2><h3 id="4-1-系统架构"><a href="#4-1-系统架构" class="headerlink" title="4.1 系统架构"></a><strong>4.1 系统架构</strong></h3><p>虽然在反馈系统下，隆哥最终到达目标位置，但是现在又来了新的任务，就是又<strong>快</strong>又<strong>准</strong>地到达目标位置。所以这里隆哥开始采用<code>PID Controller</code>，只要适当调整<code>P</code>，<code>I</code>和<code>D</code>的参数，就可以到达目标位置，具体如下图所示；</p><p><img src="https://pic1.zhimg.com/80/v2-c4bbbde3c78503e48d7b5704faad1224_1440w.jpg" alt="img"></p><p>隆哥为了最短时间内到达目标位置，进行了不断的尝试，分别出现了以下几种情况；</p><ul><li><strong>跑得太快，最终导致冲过了目标位置还得往回跑</strong>；</li><li><strong>跑得太慢，最终导致到达目标位置所用时间太长</strong>；</li></ul><p>经过不断的尝试，终于找到了最佳的方式，其过程大概如下图所示；</p><p><img src="https://pic1.zhimg.com/v2-0ff112de05bf76ca5ba7f087875b8428_b.jpg" alt="img"></p><p>这里依然举一个不是很恰当的比喻；</p><ul><li>第一步：得到与目标位置的距离偏差（比如最开始是<strong>10米</strong>，后面会逐渐变小）；</li><li>第二步：根据误差，预估需要多少速度，如何估算呢，看下面几步；</li></ul><p><code>P</code>比例则是给定一个速度的大致范围，满足下面这个公式；</p><p><img src="https://www.zhihu.com/equation?tex=%7BK_p*e(t)%7D+%5C%5C" alt="[公式]"></p><p>因此比例作用相当于某一时刻的<strong>偏差</strong>（<code>err</code>）与比例系数<img src="https://www.zhihu.com/equation?tex=K_p" alt="[公式]">的乘积，具体如下所示；</p><p><img src="https://pic1.zhimg.com/80/v2-7ecbdd3d5412383a52cc88334abff6e4_1440w.jpg" alt="img"></p><blockquote><p><strong>绿色线</strong>为上述例子中从初始位置到目标位置的距离变化； <strong>红色线</strong>为上述例子中从初始位置到目标位置的偏差变化，两者为互补的关系；</p></blockquote><hr><p><code>I</code>积分则是误差在一定时间内的和，满足以下公式；</p><p><img src="https://www.zhihu.com/equation?tex=%7B+K_i%5Cint_%7B_0%7D%5Ete(%5Ctau)d%5Ctau%7D+%5C%5C" alt="[公式]"></p><p>如下图所示；</p><p><img src="https://pic1.zhimg.com/80/v2-51f4f21be701faf75b02aaac2813b290_1440w.jpg" alt="img"></p><p>红色曲线阴影部分面积即为积分作用的结果，其不断累积的误差，最终乘以积分系数<img src="https://www.zhihu.com/equation?tex=K_i" alt="[公式]">就得到了积分部分的输出；</p><hr><p><code>D</code><strong>微分</strong>则是误差变化曲线某处的导数，或者说是某一点的斜率，因此这里需要引入微分；</p><p><img src="https://www.zhihu.com/equation?tex=%7BK_d+%5Ccfrac%7Bde(t)%7D%7Bdt%7D%7D+%5C%5C" alt="[公式]"></p><p><img src="https://pic4.zhimg.com/80/v2-35b1ed29c85bbcbc507a0f1b1e8cb7d7_1440w.jpg" alt="img"></p><p>从图中可知，当偏差变化过快，微分环节会输出较大的负数，作为抑制输出继续上升，从而抑制过冲。</p><hr><p>综上，<img src="https://www.zhihu.com/equation?tex=K_p%EF%BC%8CK_i%EF%BC%8CK_d" alt="[公式]">，<strong>分别增加其中一项参数</strong>会对系统造成的影响总结如下表所示；</p><p><img src="https://pic1.zhimg.com/80/v2-089f4abaddbacf6248ee08ed88e8e320_1440w.jpg" alt="img"></p><h3 id="4-2-理论基础"><a href="#4-2-理论基础" class="headerlink" title="4.2 理论基础"></a><strong>4.2 理论基础</strong></h3><p>上面扯了这么多，无非是为了初步理解<code>PID</code>在负反馈系统中的调节作用，下面开始推导一下算法实现的具体过程；<code>PID</code>控制器的系统框图如下所示；</p><p><img src="https://pic2.zhimg.com/80/v2-90e9a68c5a2c4d14766a40aba523cdc5_1440w.jpg" alt="img"></p><p>因此不难得出输入<img src="https://www.zhihu.com/equation?tex=e(t)" alt="[公式]">和输出<img src="https://www.zhihu.com/equation?tex=u(t)" alt="[公式]">的关系；</p><p><img src="https://www.zhihu.com/equation?tex=%7Bu(t)+=+K_pe(t)+K_i%5Cint_0%5Ete(%5Ctau)d%5Ctau+K_d%5Ccfrac%7Bde(t)%7D%7Bdt%7D%7D+%5C%5C" alt="[公式]"></p><blockquote><p><img src="https://www.zhihu.com/equation?tex=K_p" alt="[公式]">是比例增益； <img src="https://www.zhihu.com/equation?tex=K_i" alt="[公式]">是积分增益； <img src="https://www.zhihu.com/equation?tex=K_d" alt="[公式]">是微分增益；</p></blockquote><h3 id="4-3-离散化"><a href="#4-3-离散化" class="headerlink" title="4.3 离散化"></a><strong>4.3 离散化</strong></h3><p>在数字系统中进行PID算法控制，需要对上述算法进行离散化；假设系统采样时间为<img src="https://www.zhihu.com/equation?tex=%5CDelta+t" alt="[公式]"> 则将输入<img src="https://www.zhihu.com/equation?tex=e(t)" alt="[公式]">序列化得到；</p><p><img src="https://www.zhihu.com/equation?tex=(e_0,e_1,e_2,%5Ccdots,e_%7Bn-2%7D,,e_%7Bn-1%7D,e_%7Bn%7D)+" alt="[公式]"></p><p>将输出<img src="https://www.zhihu.com/equation?tex=u(t)" alt="[公式]">序列化得到；</p><p><img src="https://www.zhihu.com/equation?tex=(u_0,u_1,u_2,%5Ccdots,u_%7Bn-2%7D,,u_%7Bn-1%7D,u_%7Bn%7D)" alt="[公式]"></p><ul><li>比例项：<img src="https://www.zhihu.com/equation?tex=K_pe(t)%5Cxrightarrow%7B%E7%A6%BB%E6%95%A3%E5%8C%96%7DK_pe_k" alt="[公式]"></li><li>积分项：<img src="https://www.zhihu.com/equation?tex=K_i%5Cint_0%5E%7Bt_k%7De(%5Ctau)d%5Ctau%5Cxrightarrow%7B%E7%A6%BB%E6%95%A3%E5%8C%96%7DK_i%5Cdisplaystyle%5Csum_%7Bi=1%7D%5Eke(i)%5CDelta+t" alt="[公式]"></li><li>微分项：<img src="https://www.zhihu.com/equation?tex=K_d%5Ccfrac%7Bde(t_k)%7D%7Bdt%7D%5Cxrightarrow%7B%E7%A6%BB%E6%95%A3%E5%8C%96%7DK_d%5Ccfrac%7Be(k)+-e(k-1)%7D%7B%5CDelta+t%7D" alt="[公式]"></li></ul><p>所以最终可以得到式①，也就是网上所说的<strong>位置式PID</strong>：</p><p><img src="https://www.zhihu.com/equation?tex=%7B%5Ccolor%7B%230000FF%7D+u(k)=K_pe_k+K_i%5Cdisplaystyle%5Csum_%7Bi=1%7D%5Eke(i)%5CDelta+t+K_d%5Ccfrac%7Be(k)+-e(k-1)%7D%7B%5CDelta+t%7D%7D++" alt="[公式]"></p><p>将式①再做一下简化；</p><p><img src="https://www.zhihu.com/equation?tex=%5CDelta+u(k)+=+u(k)+-+u(k-1)" alt="[公式]"></p><p>最终得到<strong>增量式PID</strong>的离散公式如下：</p><p><img src="https://www.zhihu.com/equation?tex=+%5CDelta+u(k)=K_p(e(k)-e(k-1))+K_ie(k)+K_d+%5CBig(+e(k)-2e(k-1)+e(k-2)+%5CBig)%5C%5C" alt="[公式]"></p><h3 id="4-4-伪算法"><a href="#4-4-伪算法" class="headerlink" title="4.4 伪算法"></a><strong>4.4 伪算法</strong></h3><p>这里简单总结一下位置式PID实现的伪算法；</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">previous_error := 0  //上一次偏差<br>integral := 0   //积分和<br><br>//循环 <br>//采样周期为dt<br>loop:<br> //setpoint 设定值<br> //measured_value 反馈值<br>    error := setpoint − measured_value //计算得到偏差<br>    integral := integral + error × dt //计算得到积分累加和<br>    derivative := (error − previous_error) / dt //计算得到微分<br>    output := Kp × error + Ki × integral + Kd × derivative //计算得到PID输出<br>    previous_error := error //保存当前偏差为下一次采样时所需要的历史偏差<br>    wait(dt) //等待下一次采用<br>    goto loop<br></code></pre></td></tr></table></figure><h2 id="5-C-实现"><a href="#5-C-实现" class="headerlink" title="5 C++实现"></a><strong>5 C++实现</strong></h2><p>这里是位置式PID算法的C语言实现；</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs arduino">pid.cpp<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _PID_SOURCE_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PID_SOURCE_</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pid.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PIDImpl</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        PIDImpl( <span class="hljs-keyword">double</span> dt, <span class="hljs-keyword">double</span> <span class="hljs-built_in">max</span>, <span class="hljs-keyword">double</span> <span class="hljs-built_in">min</span>, <span class="hljs-keyword">double</span> Kp, <span class="hljs-keyword">double</span> Kd, <span class="hljs-keyword">double</span> Ki );<br>        ~PIDImpl();<br>        <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">calculate</span><span class="hljs-params">( <span class="hljs-keyword">double</span> setpoint, <span class="hljs-keyword">double</span> pv )</span></span>;<br><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">double</span> _dt;<br>        <span class="hljs-keyword">double</span> _max;<br>        <span class="hljs-keyword">double</span> _min;<br>        <span class="hljs-keyword">double</span> _Kp;<br>        <span class="hljs-keyword">double</span> _Kd;<br>        <span class="hljs-keyword">double</span> _Ki;<br>        <span class="hljs-keyword">double</span> _pre_error;<br>        <span class="hljs-keyword">double</span> _integral;<br>&#125;;<br><br><br>PID::PID( <span class="hljs-keyword">double</span> dt, <span class="hljs-keyword">double</span> <span class="hljs-built_in">max</span>, <span class="hljs-keyword">double</span> <span class="hljs-built_in">min</span>, <span class="hljs-keyword">double</span> Kp, <span class="hljs-keyword">double</span> Kd, <span class="hljs-keyword">double</span> Ki )<br>&#123;<br>    pimpl = <span class="hljs-keyword">new</span> PIDImpl(dt,<span class="hljs-built_in">max</span>,<span class="hljs-built_in">min</span>,Kp,Kd,Ki);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">PID::calculate</span><span class="hljs-params">( <span class="hljs-keyword">double</span> setpoint, <span class="hljs-keyword">double</span> pv )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pimpl-&gt;calculate(setpoint,pv);<br>&#125;<br>PID::~PID() <br>&#123;<br>    <span class="hljs-keyword">delete</span> pimpl;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Implementation</span><br><span class="hljs-comment"> */</span><br>PIDImpl::PIDImpl( <span class="hljs-keyword">double</span> dt, <span class="hljs-keyword">double</span> <span class="hljs-built_in">max</span>, <span class="hljs-keyword">double</span> <span class="hljs-built_in">min</span>, <span class="hljs-keyword">double</span> Kp, <span class="hljs-keyword">double</span> Kd, <span class="hljs-keyword">double</span> Ki ) :<br>    _dt(dt),<br>    _max(<span class="hljs-built_in">max</span>),<br>    _min(<span class="hljs-built_in">min</span>),<br>    _Kp(Kp),<br>    _Kd(Kd),<br>    _Ki(Ki),<br>    _pre_error(<span class="hljs-number">0</span>),<br>    _integral(<span class="hljs-number">0</span>)<br>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">PIDImpl::calculate</span><span class="hljs-params">( <span class="hljs-keyword">double</span> setpoint, <span class="hljs-keyword">double</span> pv )</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-comment">// Calculate error</span><br>    <span class="hljs-keyword">double</span> error = setpoint - pv;<br><br>    <span class="hljs-comment">// Proportional term</span><br>    <span class="hljs-keyword">double</span> Pout = _Kp * error;<br><br>    <span class="hljs-comment">// Integral term</span><br>    _integral += error * _dt;<br>    <span class="hljs-keyword">double</span> Iout = _Ki * _integral;<br><br>    <span class="hljs-comment">// Derivative term</span><br>    <span class="hljs-keyword">double</span> derivative = (error - _pre_error) / _dt;<br>    <span class="hljs-keyword">double</span> Dout = _Kd * derivative;<br><br>    <span class="hljs-comment">// Calculate total output</span><br>    <span class="hljs-keyword">double</span> output = Pout + Iout + Dout;<br><br>    <span class="hljs-comment">// Restrict to max/min</span><br>    <span class="hljs-keyword">if</span>( output &gt; _max )<br>        output = _max;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( output &lt; _min )<br>        output = _min;<br><br>    <span class="hljs-comment">// Save error to previous error</span><br>    _pre_error = error;<br><br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br>PIDImpl::~PIDImpl()<br>&#123;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>pid.h<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _PID_H_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PID_H_</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PIDImpl</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PID</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-comment">// Kp -  proportional gain</span><br>        <span class="hljs-comment">// Ki -  Integral gain</span><br>        <span class="hljs-comment">// Kd -  derivative gain</span><br>        <span class="hljs-comment">// dt -  loop interval time</span><br>        <span class="hljs-comment">// max - maximum value of manipulated variable</span><br>        <span class="hljs-comment">// min - minimum value of manipulated variable</span><br>        PID( <span class="hljs-keyword">double</span> dt, <span class="hljs-keyword">double</span> <span class="hljs-built_in">max</span>, <span class="hljs-keyword">double</span> <span class="hljs-built_in">min</span>, <span class="hljs-keyword">double</span> Kp, <span class="hljs-keyword">double</span> Kd, <span class="hljs-keyword">double</span> Ki );<br><br>        <span class="hljs-comment">// Returns the manipulated variable given a setpoint and current process value</span><br>        <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">calculate</span><span class="hljs-params">( <span class="hljs-keyword">double</span> setpoint, <span class="hljs-keyword">double</span> pv )</span></span>;<br>        ~PID();<br><br>    <span class="hljs-keyword">private</span>:<br>        PIDImpl *pimpl;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>pid_example.cpp<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pid.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    PID pid = PID(<span class="hljs-number">0.1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">-100</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">0.5</span>);<br><br>    <span class="hljs-keyword">double</span> val = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">double</span> inc = pid.calculate(<span class="hljs-number">0</span>, val);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val:% 7.3f inc:% 7.3f\n&quot;</span>, val, inc);<br>        val += inc;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译并测试；</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">g++ -c pid.cpp -o pid.o<br># To compile example code:<br>g++ pid_example.cpp pid.o -o pid_example<br></code></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a><strong>6 总结</strong></h2><p>本文总结了<code>PID</code>控制器算法在闭环系统中根据偏差变化的具体调节作用，每个环节可能对系统输出造成什么样的变化，给出了位置式和增量式离散<code>PID</code>算法的推导过程，并给出了位置式算法的<code>C++</code>程序实现。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF</title>
    <link href="/2021/05/18/hello-world%20-%20%E5%89%AF%E6%9C%AC%20(2)%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2021/05/18/hello-world%20-%20%E5%89%AF%E6%9C%AC%20(2)%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CTF的概念"><a href="#CTF的概念" class="headerlink" title="CTF的概念"></a>CTF的概念</h1><p>CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。</p><h1 id="CTF的比赛模式"><a href="#CTF的比赛模式" class="headerlink" title="CTF的比赛模式"></a>CTF的比赛模式</h1><p>一、解题模式（Jeopardy）</p><p>在解题模式CTF赛制中，参赛队伍可以通过互联网或者现场网络参与，这种模式的CTF竞赛与ACM编程竞赛、<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%A5%A5%E8%B5%9B/1147921">信息学奥赛</a>比较类似，以解决网络安全技术挑战题目的分值和时间来排名，通常用于在线选拔赛。题目主要包含逆向、漏洞挖掘与利用、Web渗透、密码、取证、隐写、安全编程等类别。</p><p>二、攻防模式（Attack-Defense）</p><p>在攻防模式CTF赛制中，参赛队伍在网络空间互相进行攻击和防守，挖掘网络服务漏洞并攻击对手服务来得分，修补自身服务漏洞进行防御来避免丢分。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续48小时及以上），同时也比团队之间的分工配合与合作。</p><p>三、混合模式（Mix）</p><p>结合了解题模式与攻防模式的CTF<a href="https://baike.baidu.com/item/%E8%B5%9B%E5%88%B6">赛制</a>，比如参赛队伍通过解题可以获取一些初始分数，然后通过攻防对抗进行得分增减的零和游戏，最终以得分高低分出胜负。采用混合模式CTF赛制的典型代表如iCTF国际CTF竞赛。</p><h1 id="方向类型"><a href="#方向类型" class="headerlink" title="方向类型"></a>方向类型</h1><p><a href="http://lc-brfdabhh.cn-n1.lcfile.com/2c68e12ab8788075abbe.jpg/qq_pic_merged_1616234672641.jpg"><img src="http://lc-brfdabhh.cn-n1.lcfile.com/2c68e12ab8788075abbe.jpg/qq_pic_merged_1616234672641.jpg" alt="image-20210320180822352"></a></p><p><a href="http://lc-brfdabhh.cn-n1.lcfile.com/2c68e12ab8788075abbe.jpg/qq_pic_merged_1616234672641.jpg">image-20210320180822352</a></p><p><a href="http://lc-brfdabhh.cn-n1.lcfile.com/a25f4f9878bf95b0c4b4.jpg/qq_pic_merged_1616234769264.jpg"><img src="http://lc-brfdabhh.cn-n1.lcfile.com/a25f4f9878bf95b0c4b4.jpg/qq_pic_merged_1616234769264.jpg" alt="image-20210320180846241"></a></p><p><a href="http://lc-brfdabhh.cn-n1.lcfile.com/a25f4f9878bf95b0c4b4.jpg/qq_pic_merged_1616234769264.jpg">image-20210320180846241</a></p><h1 id="一些可能用到的工具-网站"><a href="#一些可能用到的工具-网站" class="headerlink" title="一些可能用到的工具/网站"></a>一些可能用到的工具/网站</h1><p><a href="https://www.ctftools.com/down/">工具站</a></p><p>1.CTF起步指南：<a href="https://link.zhihu.com/?target=http://blog.idf.cn/2014/06/how-to-get-started-in-ctf/">如何开始CTF比赛之旅</a><br>2.网站：FreeBuf、 乌云<br>3.逆向：看雪学院CrackMe、ReverseMe, <a href="https://link.zhihu.com/?target=http://www.crackmes.de">Crackmes.de - Welcome to the longest running and most complete Crackmes web page on the internet.</a>、BLACKBOX<br>4.杂志《安全参考》《乌云月报》<br>5.博客 各安全大牛博客，<a href="https://link.zhihu.com/?target=http://217.logdown.com/">217’s Blog、http://blog.0ops.net/</a>、<br>6.writeup参考 [CTF Writeup Summary <a href="https://link.zhihu.com/?target=http://sec.yka.me/">CTF Writeup Summary]</a>、<a href="https://link.zhihu.com/?target=http://www.hackdog.me/writeup/">writeup”&gt;//**/</a><br>7.题库：<a href="https://link.zhihu.com/?target=http://oj.xctf.org.cn/notices">XCTF_OJ竞赛平台、http://ctf.idf.cn/</a>等</p><p>8.<a href="https://link.zhihu.com/?target=https://butian.360.cn/">补天 - 企业和白帽子共赢的漏洞响应平台，帮助企业建立SRC，库带计划</a></p><p>（来源链接：<a href="https://www.zhihu.com/question/30505597/answer/48335776%EF%BC%89">https://www.zhihu.com/question/30505597/answer/48335776）</a></p><h1 id="加油！"><a href="#加油！" class="headerlink" title="加油！"></a>加油！</h1>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>赛博中国，一种基于大数据分析的乡村振兴物联网系统</title>
    <link href="/2021/03/20/hello-world%20-%20%E5%89%AF%E6%9C%AC%20(2)/"/>
    <url>/2021/03/20/hello-world%20-%20%E5%89%AF%E6%9C%AC%20(2)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>目 录</p><p><strong>第一章：项目概述————–01</strong></p><p><strong>第二章：产品介绍————–02</strong></p><p><strong>第三章：技术介绍————–04</strong></p><p><strong>第四章：发展规划————–06</strong></p><p><strong>第五章：营销策略————–07</strong></p><p><strong>第六章：财务分析————–08</strong></p><p><strong>第七章：创业团队情况———09</strong></p><p><strong>第八章：竞争分析————–10</strong></p><p><strong>第九章：其它——————-11</strong></p><p><strong>第一章：项目概述</strong></p><p>1.1 项目背景及意义</p><p>当今中国，随着脱贫攻坚取得阶段性成果，乡村振兴计划被受到重视。现阶段中国农村政治的基本状况是:国家主导农村社会的格局没有发生根本性的变化,乡镇政权对农村社会的政治、经济和文化的发展起着决定性的作用,农村社会秩序处不稳态;村级治理体制处于结构性转型之中。外来资本和先进生产方式对乡村振兴起到了很大作用。基于此，我们设计了一种基于大数据分析的乡村振兴物联网解决方案。配合app，传感器，大数据，统筹规划乡村发展，助力乡村振兴。</p><p>1.2 项目目标及内容</p><p>项目目的在于通过大数据统筹应用，狭义地说是使用各种先进的技术手段尤其是信息技术手段改善乡村状况，使乡村生活便捷；广义上理解应是尽可能优化整合各种资源，乡村规划、建筑让人赏心悦目，让生活在其中的市民可以陶冶性情心情愉快而不是压力，总之是适合人的全面发展的乡村。通过物联网设施（IoT）链接众多乡村农业设施，监控农业产值，同时在互联网平台上对接商家。通过把传感器嵌入和装备到农村每个角落的供电系统、供水系统、交通系统、建筑物和油气管道等生产生活系统的各种物体中，使其形成的物联网与互联网相联，实现人类社会与物理系统的整合。最终实现从生产到销售全流程互联网控制。</p><p>1.3 项目研究基础</p><p>2008年11月，恰逢 2007年－2012年环球金融危机伊始，IBM在美国纽约发布的《智慧地球：下一代领导人议程》主题报告所提出 的“智慧地球”，即把新一代信息技术充分运用在各行各业之中。 具体地说，“智慧”的理念就是通过新一代信息技术的应用使人类能以更加精细和动态的方式管理生产和生活的状态，通过把传感器嵌入和装备到全球每个角落的供电系统、供水系统、交通系统、建筑物和油气管道等生产生活系统的各种物体中，使其形成的物联网与互联网相联，实现人类社会与物理系统的整合，而后通过超级计算机和云计算将物联网整合起来，即可实现。</p><p>在上世纪70年代的时候，为了大幅增长苏联经济管理的决策与控制能力，苏联将资源大规模倾向于建设全国管理信息系统，简称OGAS。它是系统制度快速趋向于管理合理化（尤其是基于其在控制论下的表述）的产物，并已发展成为技术改造的变体，同时也是1965年的经济改革的替代方案和后继者。作为一大统筹系统，苏联将OGAS设想为能够解决苏维埃在社会经济发展阶段所暴露的基于基础经济，社会，组织等一系列难题的一大利器。[1]</p><p>1.4 项目应用前景<a href="https://iknow-pic.cdn.bcebos.com/e61190ef76c6a7ef7b835a5bedfaaf51f3de6622"> </a>随着中国政府陆续开展和推广智慧乡村试点工作，智慧乡村相关的政策红利不断释放，同时吸引了大量社会资本加速投入。根据2020年2月IDC最新发布的《全球智慧社会支出指南》，至2020年，中国智慧乡村投资市场支出规模将达到266亿美元，是支出第二大的国家，仅次于美国。项目前景广泛。</p><p><strong>第二章：产品介绍</strong></p><p>2.1 产品概述</p><p>产品的核心思路是将监控测控物联网系统实时连接手机端，在获取基本服务费覆盖运营费用基础上，跨界挖掘大数据提供专业增值服务，<strong>本项目研发了一套“三位一体”（测控硬件、App软件和云计算平台）的农业物联网软硬件系统，以政府与企业合作的方式迅速推广建立分布式农业农村测控系统，通过共享模式服务于广大的农民，助推农业实现生产销售一体化、实时化和云智能化。</strong></p><p>2.2 产品设计</p><p>系统由前端传感器、云计算后台、手机端APP三大部份组成。</p><p>（1） 前端传感器</p><p>水管理<br> 　目前，主要农村由于灌溉泄漏而浪费高达50％的水。通过在每条管道上安装传感器，可以很容易地检测到漏水并进行纠正，以免造成重大损失。除此之外，只要发现雨水，灌溉系统就可以自动关闭。</p><p>能源管理<br> 　传感器还启用了“高级计量基础架构（AMI）”概念，为能源管理奠定了基础。正在考虑使用内置有相位测量单元（PMU）传感器和通信模块的“智能电表”，该模块可促进消费者和供应商之间的双向通信。对于公用事业服务提供商，它有助于在响应客户呼叫而派遣维修人员之前检查电表状态。这些检查可以防止不必要的现场工作人员派遣到客户现场。对于消费者而言，它可以以用户可以轻松理解的方式提供实时能源使用详细信息。基于此数据，用户可以更改首选项并就其使用情况做出更明智的决定，而无需等待月底的电费。</p><p>实时污染管理<br> 　电线杆上安装的传感器可以监控实时的环境空气质量（AAQ）。人们可以监控城市每条街道上的污染浓度，或者当污染水平超过特定水平时，他们会自动发出警报。</p><p>农业生产管理<br> 　农业设施上安装的传感器可以实时监控农作物和牲畜状态，根据天气情况判断是否灌溉。在牲畜管理上使用RFID进行通信。同时通过决策制定合适的喂养方式，监控状态并写入RFID。每件农产品出场时都具有根据RFID记录的电子标签。</p><p>此外，还有监控桥梁、医疗保健、智能交通等应用。</p><p>（2） 云计算后台</p><p>云计算后台通过大数据分析，借用现有蚁群算法，推荐算法等，对接平台，精准推送。</p><p>（3） 安卓端app</p><p>技术路线：本项目通过前端与后端结合的方式，使用HTML语言构造框架，设计UI。通过模拟浏览器的模式，在node.js及leancloud云服务存储外链构建后端平台。结合Python爬虫和大数据分析。在 Android Studio上完成开发。精准推送各种信息。</p><p> 拟解决问题：<br> Fragment的懒加载<br> 一个Activity里面可能会以viewpager（或其他容器）与多个Fragment来组合使用，而如果每个fragment都需要去加载数据，或从本地加载，或从网络加载，那么在这个activity刚创建的时候就变成需要初始化大量资源。</p><p> 登陆设置<br> 前端调用后台生成二维码的API，获取到二维码图片和所包含的信息（通常是一个唯一ID）</p><p> 调用API请求<br> 将URL（包括参数）放在在服务器中搜索，等待服务器响应。<br> 请求URL，获取服务器的返回结果：请求的方式为http（一般通过程序封装的request来完成）。</p><p> 前端优化：减少http请求，合理设置 HTTP缓存<br> http协议是无状态的应用层协议，意味着每次http请求都需要建立通信链路、进行数据传输，而在服务器端，每个http都需要启动独立的线程去处理。这些通信和服务的开销都很昂贵，减少http请求的数目可有效提高访问性能。</p><p> 后端高并发问题：基本的解决方案集中在这样几个环节：使用高性能的服务器、高性能的数据库、高效率的编程语言、还有高性能的Web容器。大型网站都有复杂的应用，这些应用必须使用数据库，那么在面对大量访问的时候，数据库的瓶颈很快就能显现出来，这时一台数据库将很快无法满足应用，于是我们需要使用数据库集群或者库表散列。</p><p> 总结：通过模拟浏览器的方式完成APP设计是安卓开发中的一种常见形式。需要解决的问题主要集中于前端和后端框架。</p><p>​                               </p><p>项目示意图</p><p>2.3 产品创新</p><p><strong>我们项目大大降低了互联网农业创新的门槛。</strong></p><p><strong>（1）互联网架构与运营思维创新。</strong>①真正贯彻流量思维和跨界思维，着眼于硬件免费、快速构建大数据库并挖掘增值服务获利的模式运营，摒弃当前行内卖设备硬件赚钱而忽视数据价值，死磕单个客户价格而忽略农业大数据价值的思路；②系统的结构釆用积木式分布式结构，只需安装前端测控传感器，且可通过物联网任意联网扩充，因标准化和规模化设计成本更低；③后台通过云端接入大型计算机服务器，集中处理数据，采用数理统计和农业农村专家模型相结合的优化算法。</p><p><strong>（2）创新：</strong>已研发并正在申请专利的技术创新：云终端集中智能分析，远距离实现闭环测控，模式科学高效，成本大幅降低。</p><p><strong>（3）商业模式创新：</strong>采用“共享（会员硬件免费）＋增值服务收费”，会员无投资风险，服务性价比高，会员扩充易，可刺激产业迅速发育。公司在获得投资支持后能快速占领市场，成长为巨型公司。具体而言，客户对象是农业养殖户，只需按时向公司交纳会费即成为公司会员，享受公司的服务：①会员免费安装全套的农业条件，牲畜健康，智能灌溉，果树种植智能测控硬件系统；②会员享受实时农业测控服务，以及系统运行维护和管理；③会员免费安装手机智农App应用软件，智农app可以随时随地接收自已鱼塘水质生态信息；④商户定制性付费增值服务，包括量身定做的专家农业病虫害治理方案及实施；⑤政府和行业农业治理与生产销售增值服务，基于广泛的客户分布和积累的农业大数据，可以组织专家开展大数据挖掘的，为政府或行业组织开展农业基础数据调查、对农业生产问题和病虫害实施监控和处理等。同时沟通销路，通过互联网销售农业产品。</p><p>2.4 产品应用</p><p>本扶贫创新项目与中南民族大学城乡研究院对接，2020年初于河南省新乡市辉县首先投入使用，当地驻村干部反响良好。2021年，远卓商贸公司挂牌成立。运用本服务平台扩展乡村业务，年业务增长达到32.1%</p><p><strong>第三章：技术介绍</strong></p><p>本项目通过前端与后端结合的方式，使用HTML语言构造框架，设计UI。通过模拟浏览器的模式，在node.js及leancloud云服务存储外链构建后端平台。结合Python爬虫和大数据分析。在 Android Studio上完成开发。精准推送各种信息。</p><p><strong>第四章：发展规划</strong></p><p>4.1 市场前景</p><p>国家鼓励开展应用模式创新,推进智慧乡村建设。根据调查数据显示,我国已有311个地级市开展数字建设,其中158个数字乡村已经建成并在60多个领域得到广泛应用,同时最新启动了100多个数字县域建设和3个智慧城市建设试点。2013年,国家测绘地理信息局将在全国范围内组织开展时空信息云平台建设试点工作,每年将选择10个左右城市进行试点,每个试点项目建设周期为2至3年,经费总投入不少于3600万元。在不久的将来,人们将尽享智能家居、路网监控、智能医院、食品药品管理、数字生活等所带来的便捷服务,乡村振兴时代即将到来作为近年来农村发展的热点。</p><p>中国智慧乡村投资预测 来源：IDC</p><p>4.2 市场特征</p><p>据工信部《2014 年 lCT 深度报告》统计,目前中国89%的地级以上城市(241个)、47%的县级及以上城乡(51个)都在推进智慧乡村建设。过去一年中,发展最大的变化是,政府相关部门已经意识到,将市场机制引入智慧乡村建设已成为必然选择。财政部曾下发《关于推动运营政府和社会资本合作模式的有关问题通知》,使得 PPP (政府与社会资本合作)模式得以进入智慧城市建设。未来的智慧城市市场趋势是由政府主导下的民间资本参与完成。</p><p><strong>第五章：财务分析</strong></p><p>5.1资金来源</p><p>资金来源主要是政企合作，招标项目。在资金投入方面，全国县域农业农村信息化建设2019年财政总投入为182.1亿元，社会资本投入为478.5亿元，财政的撬动作用得到显现。</p><p>主要融资途径包括：</p><p>·    开发APP和CBTR项目，可和用户沟通，以获得咨询费，会员收益和佣金收益；</p><p>·    开发的部分项目，可和投资基金共同购买，双方各买50％或按照其它比例共同购买，以获得项目开发融资；</p><p>·    开发可再生能源项目，可和最终买家及当地政府沟通，以实现项目开发融资；</p><p>5.2成本预算</p><table><thead><tr><th><strong>项目开发和申报成本预算</strong></th><th><strong>金额</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>发改委申报费用</td><td>2</td><td>用于专家预审；</td></tr><tr><td>传感器搭设费用</td><td>16</td><td>用于采购搭设传感器；</td></tr><tr><td>服务器采购费用</td><td>10</td><td>用于支付资源方；</td></tr><tr><td>工商注册费</td><td>12</td><td>某些优质项目, 需要公司承担注册费;</td></tr><tr><td>其它</td><td>5</td><td></td></tr><tr><td>总计</td><td>45万</td><td></td></tr></tbody></table><p><strong>第六章：创业团队情况</strong></p><p>6.1 团队成员</p><p>王一鸣,男,河南漯河人.就读于中南民族大学生物医学工程学院生物医学工程类专业.个人涉猎广泛,精通C语言和信号与系统,对新奇事物充满好奇,遇到问题是能沉着冷静分析坚持不懈.曾在初中阶段获得”希望杯”数学竞赛三等奖,高中获得高中物理竞赛省二奖,化学竞赛省二奖,在大学生英语竞赛中获得优秀成绩,在校内的”文字暖寒冬,书香沁人心”征文活动中获得优秀奖.</p><p>李林远，男，河南新乡人。现就读于中南民族大学计算机科学学院，创新能力强。</p><p>盖·浩赫尔，蒙古族，出生于2002年，现于中南民族大学机械设计制造及其自动化专业大一在读，就读期间学习勤奋努力，为人开朗乐观，有良好的应变和语言交际能力，思想上积极向上，敢于创新，综合能力较好，曾获内蒙古2011届英语演讲比赛一等奖，校级纪念毛泽东诞辰120周年朗诵比赛第一名，2018年获得校级团体诗词朗诵大赛二等奖，高中校园突出个人，校级优秀广播员，2020年赴新华社内蒙古分社交流学习，同年进入中南民族大学双塔之声，表现良好。</p><p>李瑞恒，湖北黄冈人。生于2001，现就读于中南民族大学计算机科学学院计算机类专业，在读期间学习勤奋努力，为人正直，思想上积极进步，现担任班级班长，全国“希望杯”数学竞赛获奖者，2018年获得湖北省武穴市高级中学数学竞赛校级奖获奖者，校园优秀团员，校园优秀毕业生，2020年参与惠科集团“开课吧”实战项目“快递e栈”JAVA后端开发项目，目前自学日语1年，于2021年获得日语N2证书。</p><p>6.2 所获奖励</p><p>第十八届中国青少年竞赛机器人创意比赛获创意组国家三等奖</p><p><strong>第七章：竞争分析</strong></p><p>7.1竞争对手</p><p>湖南惠农科技有限公司“全国数字乡村建设项目”</p><p>7.2分析竞争对手产品内容</p><p>数字乡村服务是整合云计算、电子商务、新零售、金融等各类资源，为县域政府开展“数字乡村”创新提供的整体解决方案。主要是基于1+1+2+N架构（即1朵云、1个大中台、2个端、N个智能应用，1朵云是指各县域专属的“政务云”，1个大中台是指各县域的“数据中台”+“业务中台”，2个端是指各县域的“行政人员协同端”和“公众/企业服务端”</p><p>7.3产品对比</p><p>数字项目较物联网的缺点</p><p>1、数字基础设施很薄弱，互联网基础设施需要加强，数字产业化和产业数字化需要互相促进才能助力数字经济的发展。</p><p>2、数字应用在农村还是比较少的，比如现在的农村电商，移动社交等还主要在一些试点地区实行，远远没有达到普及的程度，需要扩大应用。</p><p>3、数字和农村显得格格不入，并不能融合，造成数字和农村是两块不相干的内容一样，需要深入融合</p><p><strong>第八章：其他</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less">引用文献：【<span class="hljs-selector-tag">1</span>】<span class="hljs-selector-tag">Yongjin</span> <span class="hljs-selector-tag">Choi</span> <span class="hljs-selector-tag">et</span> <span class="hljs-selector-tag">al</span>. <span class="hljs-selector-tag">Compaction</span> <span class="hljs-selector-tag">Quality</span> <span class="hljs-selector-tag">Monitoring</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">Open-Graded</span> <span class="hljs-selector-tag">Aggregates</span> <span class="hljs-selector-tag">by</span> <span class="hljs-selector-tag">Light</span> <span class="hljs-selector-tag">Weight</span> <span class="hljs-selector-tag">Deflectometer</span> <span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">Soil</span> <span class="hljs-selector-tag">Stiffness</span> <span class="hljs-selector-tag">Gauge</span><span class="hljs-selector-attr">[J]</span>. <span class="hljs-selector-tag">Sustainability</span>, <span class="hljs-selector-tag">2020</span>, <span class="hljs-selector-tag">12</span>(<span class="hljs-number">6</span>)<br>【<span class="hljs-selector-tag">2</span>】刘洁,李晓霞.甘肃瓜州：智慧农业引领乡村振兴新样板<span class="hljs-selector-attr">[J]</span>.中国农资,<span class="hljs-selector-tag">2021</span>(Z1)<span class="hljs-selector-pseudo">:15.</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端</title>
    <link href="/2021/01/15/hello-world%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2021/01/15/hello-world%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="1-浏览器内核"><a href="#1-浏览器内核" class="headerlink" title="1.浏览器内核"></a>1.浏览器内核</h2><p>主要浏览器及其内核</p><p>　　（1）trident：国内大多双核浏览器（ie、360急速、百度、猎豹安全、腾讯TT、Avant、世界之窗）的内核</p><p>　　（2）edgeHTmL：IE内核（windows10之后，IE将其内置浏览器命名为Edge）</p><p>　　（3）gecko：Firefox内核（开源，但打开速度慢、升级频繁、需要加载flash）</p><p>　　（4）webkit：Safari内核（苹果公司），代表浏览器：傲游浏览器3、Apple Safari（win/iphone/ipad）、symbian手机浏览器、安卓默认浏览器</p><p>　　（5）blink：谷歌内核（blink是webkit的分支，2013年4月3日，开始使用blink）</p><p>　　（6）presto：opera前任内核（目前已投入使用blink）</p><p>　 3、目前移动设备浏览器常用内核有webkit、blink、trident、gecko：</p><p>　　（1）webkit：iphone和ipad等IOS平台内核，android4.4之前系统浏览器内核</p><p>　　（2）blink：android4.4之后系统浏览器（chromium）内核</p><p>​    （3）trident ：windows phone 8系统浏览器内核</p><h2 id="2-框架"><a href="#2-框架" class="headerlink" title="2.框架"></a>2.框架</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中：lang表示网站语言</p><head></head>代表文件头，包含网站标题及字符集<body></body>代表文档的主体<h2 id="3-元素"><a href="#3-元素" class="headerlink" title="3.元素"></a>3.元素</h2><p>1、标题标签：<h1></h1>到<h6></h6>，依次递减.</p><p>2、段落标签：<p></p></p><p>3、水平线：  <hr />或者<hr/>或者 <hr></p><p>4、链接:    <a href="default.htm"></a></p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h1 id="1-盒子"><a href="#1-盒子" class="headerlink" title="1.盒子"></a>1.盒子</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: lightgrey;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid green;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">25px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>css盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><h2 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h2><p>css选择器用于选择元素的样式的模式。</p><p>1.css属性选择器</p><p>由css命名及后面属性及属性值构成一个完整。<br>代码如下</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">abab&#123;<span class="hljs-string">...</span> <span class="hljs-string">...</span> 属性及值&#125;<br></code></pre></td></tr></table></figure><p>abab被称为css命名名称，<br>而跟后面花括号内容及divcss5一起被称为CSS属性选择器</p><p>2.子选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &gt; <span class="hljs-selector-tag">strong</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;<br></code></pre></td></tr></table></figure><p>选择作为 h1 元素子元素的所有 strong 元素</p><p>3.相邻兄弟选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> + <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">margin-top</span>:<span class="hljs-number">50px</span>;&#125;<br></code></pre></td></tr></table></figure><p>选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素</p><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h2><p><strong>JavaScript数据类型：</strong></p><p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><p>创建数组</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> mycars = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>()</span><br><span class="javascript">mycars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Saab&quot;</span></span><br><span class="javascript">mycars[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Volvo&quot;</span></span><br><span class="javascript">mycars[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;BMW&quot;</span></span><br><br><span class="javascript"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;mycars.length;i++)</span><br>&#123;<br><span class="javascript"><span class="hljs-built_in">document</span>.write(mycars[i] + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>创建,赋值并输出数组</p><h2 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h2><p>在 JavaScript 中，对象是数据（变量），拥有属性和方法。</p><p>1.创建对象</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">var Object=</span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml">;/* 声明对象字面变量*/</span><br><span class="xml">Object.name=&quot;Jener&quot;;/*向对象添加新成员*/</span><br><span class="xml">Object.age=25;</span><br><span class="xml">alert(Object.name);/*利用弹窗输出对象name属性值*/</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2.访问</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">console.log(<span class="hljs-keyword">object</span>.name);<br>        console.log(<span class="hljs-keyword">object</span>[&quot;name&quot;]);<br>        <span class="hljs-keyword">object</span>.name();<br>        <span class="hljs-keyword">object</span>[&quot;name&quot;]();<br></code></pre></td></tr></table></figure><p>读取并访问对象.</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2021/01/07/hello-world%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2021/01/07/hello-world%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git的用法"><a href="#Git的用法" class="headerlink" title="Git的用法"></a>Git的用法</h1><h2 id="1-github仓库和账号创建完毕"><a href="#1-github仓库和账号创建完毕" class="headerlink" title="1.github仓库和账号创建完毕"></a>1.github仓库和账号创建完毕</h2><h2 id="2-git版本控制"><a href="#2-git版本控制" class="headerlink" title="2.git版本控制"></a>2.git版本控制</h2><p>操作说明：</p><h3 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git init 初始化仓库<br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">拷贝仓库到本地</span><br></code></pre></td></tr></table></figure><p>此时应在本地创建一个文件夹</p><h3 id="2-提交"><a href="#2-提交" class="headerlink" title="2.提交"></a>2.提交</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> 把文件添加到仓库</span><br>git commit 提交文件<br>git rm 删除文件<br></code></pre></td></tr></table></figure><p>git commit后加-m <xxx>表示提交说明</p><h2 id="3-远程操作"><a href="#3-远程操作" class="headerlink" title="3.远程操作"></a>3.远程操作</h2><h3 id="以ssh协议将GitHub与本地仓库关联"><a href="#以ssh协议将GitHub与本地仓库关联" class="headerlink" title="以ssh协议将GitHub与本地仓库关联"></a>以ssh协议将GitHub与本地仓库关联</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;关联电子邮件&quot;</span><br>创建ssh key命令<br></code></pre></td></tr></table></figure><p>然后在GitHub中关联id_rsa.pub中的公钥</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">$ git remote <span class="hljs-keyword">add</span><span class="bash"> origin git@github.com:IronMan2002/learngit.git</span><br></code></pre></td></tr></table></figure><p>关联仓库</p><h3 id="远程推送命令-git-push"><a href="#远程推送命令-git-push" class="headerlink" title="远程推送命令**git push**"></a>远程推送命令**<em>git push**</em></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> remote 操作远程库<br></code></pre></td></tr></table></figure><p>将文件添加到本地库后</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git push origin <span class="hljs-keyword">master</span> <span class="hljs-title">推送master</span>分支到GitHub<br></code></pre></td></tr></table></figure><p>推送到GitHub</p><h2 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4.分支管理"></a>4.分支管理</h2><p><code>master</code>是主分支，<code>HEAD</code>指向的是当前分支。</p><p>可使用<code>git branch (名称)</code>创建新分支。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/05/hello-world/"/>
    <url>/2021/01/05/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浅析Mifare1系列RFID卡破解"><a href="#浅析Mifare1系列RFID卡破解" class="headerlink" title="浅析Mifare1系列RFID卡破解"></a>浅析Mifare1系列RFID卡破解</h1><h2 id="M1卡：MIFARE是恩智浦半导体公司（NXP-Semiconductors）拥有的一系列非接触式智能卡和近傍型卡技术的注册商标。"><a href="#M1卡：MIFARE是恩智浦半导体公司（NXP-Semiconductors）拥有的一系列非接触式智能卡和近傍型卡技术的注册商标。" class="headerlink" title="M1卡：MIFARE是恩智浦半导体公司（NXP Semiconductors）拥有的一系列非接触式智能卡和近傍型卡技术的注册商标。"></a>M1卡：<strong>MIFARE</strong>是<a href="https://zh.wikipedia.org/wiki/%E6%81%A9%E6%99%BA%E6%B5%A6%E5%8D%8A%E5%AF%BC%E4%BD%93">恩智浦半导体公司</a>（NXP Semiconductors）拥有的一系列<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E6%8E%A5%E8%A7%A6%E5%BC%8F%E6%99%BA%E8%83%BD%E5%8D%A1">非接触式智能卡</a>和<a href="https://zh.wikipedia.org/wiki/%E8%BF%91%E5%82%8D%E5%9E%8B%E5%8D%A1">近傍型卡</a>技术的注册商标。</h2><p>MIFARE包括一系列依循<a href="https://zh.wikipedia.org/wiki/ISO/IEC_14443">ISO/IEC 14443</a>-A规格，利用<a href="https://zh.wikipedia.org/wiki/%E7%84%A1%E7%B7%9A%E5%B0%84%E9%A0%BB%E8%AD%98%E5%88%A5">无线射频识别</a>（频率为13.56<a href="https://zh.wikipedia.org/wiki/MHz">MHz</a>）的多种非接触式智能卡专有解决方案。这项技术是最早是1994年由<a href="https://zh.wikipedia.org/w/index.php?title=%E7%B1%B3%E5%85%8B%E6%9C%97&action=edit&redlink=1">米克朗</a>集团（Mikron Group）开发，在1998年转售给<a href="https://zh.wikipedia.org/wiki/%E9%A3%9B%E5%88%A9%E6%B5%A6">飞利浦电子公司</a>（2006年更名为恩智浦半导体公司）。近年来MIFARE已经普遍在日常生活当中使用，如大众运输系统付费、商店小额消费、门禁安全系统、借书证等。他们<strong>专有的加密算法</strong>（CRYPTO-1）已经被<strong>反向工程</strong>，并在十年前被研究人员打破。 。</p><h2 id="硬件架构及工作原理"><a href="#硬件架构及工作原理" class="headerlink" title="硬件架构及工作原理"></a>硬件架构及工作原理</h2><table><thead><tr><th>区段</th><th>区块 0</th><th>区块 1</th><th>区块 2</th><th>区块 3</th></tr></thead><tbody><tr><td>0</td><td>制造商代码</td><td>资料区</td><td>资料区</td><td>密钥、访问权限</td></tr><tr><td>1</td><td>资料区</td><td>资料区</td><td>资料区</td><td>密钥、访问权限</td></tr><tr><td>:</td><td>:</td><td>:</td><td>:</td><td>:</td></tr><tr><td>14</td><td>资料区</td><td>资料区</td><td>资料区</td><td>密钥、访问权限</td></tr><tr><td>15</td><td>资料区</td><td>资料区</td><td>资料区</td><td>密钥、访问权限</td></tr></tbody></table><p>来源：<a href="https://zh.wikipedia.org/wiki/MIFARE#%E6%94%BB%E6%93%8A%E4%BA%8B%E4%BB%B6">维基百科</a></p><h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><h3 id="01-读出数据"><a href="#01-读出数据" class="headerlink" title="01.读出数据"></a>01.读出数据</h3><p><img src="https://downloads.acs.com.hk/images/acr122u_2_1.jpg" alt="STD019_ACR122"></p><p>本次使用acr122u在13.56 MHz频段上读取，软件使用基于Linux kali的mfcuk</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">root @ kali：〜＃mfcuk -h</span><br><span class="hljs-attribute">mfcuk-0.3.8</span><br><span class="hljs-attribute">Mifare Classic DarkSide密钥恢复工具-0.3</span><br><span class="hljs-attribute">by Andrei Costin，zveriu@gmail.com，http</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"></span>: //andreicostin.com用法：<br><span class="hljs-literal">-C-要求与阅读器进行显式连接。如果没有此选项，则不会建立连接，也不会进行恢复</span><br><span class="hljs-literal">-i mifare.dmp-装入输入mifare_classic_tag类型转储</span><br><span class="hljs-literal">-I mifare_ext.dmp-装入此工具特定的扩展输入转储，在mifare_classic_tag类型转储之上还有多个字段</span><br><span class="hljs-literal">-o mifare.dmp-将生成的mifare_classic_tag转储输出到给定文件</span><br><span class="hljs-literal">-O mifare_ext.dmp-将生成的扩展转储输出到给定文件</span><br><span class="hljs-literal">-V扇区[：A / B / any_other_alphanum [：fullkey]]-验证指定的密钥部门，-1表示所有部门</span><br>    在指定了第一个分号密钥类型之后：A仅验证密钥A，B仅验证密钥B，其他所有内容验证两个密钥<br>    在指定了第二个分号完整的12个十六进制数字密钥之后-该密钥将覆盖给定扇区的任何已加载的转储密钥）和密钥类型<br><span class="hljs-literal">-R扇区[：A / B / any_other_alphanum]-恢复扇区的密钥，-1表示所有扇区。</span><br>    在指定了第一个分号键类型之后：A仅恢复keyA，B仅恢复keyB，其他任何东西都恢复两个键<br><span class="hljs-literal">-U UID-强制特定的UID。如果使用-i加载了转储，则-U将覆盖加载了转储的内存中的</span><br><span class="hljs-literal">-M标签类型-强制特定标签类型。8是1K，24是4K，32是DESFire</span><br><span class="hljs-literal">-D-对于标记为要验证的扇区和密钥类型，首先使用默认密钥进行验证（也许您很幸运）</span><br><span class="hljs-literal">-d key-指定要检查的其他完整的12进制数字默认密钥。多个-d选项可用于更多其他键</span><br><span class="hljs-literal">-s-SLEEP_AT_FIELD_OFF休眠的毫秒数（默认值：10 ms）</span><br><span class="hljs-literal">-S-SLEEP_AFTER_FIELD_ON休眠的毫秒数（默认值：50 ms）</span><br><span class="hljs-literal">-P hex_literals_separated-尝试从a中恢复密钥Proxmark3（基于mifarecrack.c）嗅到的会话。接受几个选项：</span><br>    以uid：tag_chal：nr_enc：reader_resp：tag_resp形式的十六进制文字格式的串联字符串<br>    示例-P 0x5c72325e：0x50829cd6：0xb8671f76：0xe00eefc9：0x4888964f将找到关键字FFFFFFFFFFFF<br><span class="hljs-literal">-p proxmark3_full.log-尝试自行分析日志文件（基于mifarecrack.py），获取选项-P的值并调用它-F-</span><br>尝试根据已知卡的数据对输入转储（-i）进行指纹识别格式<br><span class="hljs-literal">-v verbose_level-详细级别（默认为O）</span><br><br>使用示例：<br>  恢复所有扇区中的所有密钥：<br>    mfcuk -C -R -1<br>  以250 ms的时间恢复所有延迟的扇区＃0密钥（延迟可能会提供更多结果）：<br>    mfcuk -C -R 0 -s 250 -S 250<br></code></pre></td></tr></table></figure><p>这是kali提供的实例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mfcuk</span> -C -R <span class="hljs-number">0</span>：A<br></code></pre></td></tr></table></figure><p>检索a密钥</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">&gt;</span> <span class="hljs-variable">mfoc</span> <span class="hljs-operator">-</span><span class="hljs-built_in">O</span> <span class="hljs-type">source_dump</span><span class="hljs-operator">.</span><span class="hljs-variable">mfd</span> <span class="hljs-operator">-</span><span class="hljs-variable">k</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">the</span> <span class="hljs-variable">key</span> <span class="hljs-variable">A</span> <span class="hljs-variable">you</span> <span class="hljs-variable">retrieved</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">The</span> <span class="hljs-variable">custom</span> <span class="hljs-variable">key</span> <span class="hljs-number">0</span><span class="hljs-variable">xFFFFFFFFFFFF</span> <span class="hljs-variable">has</span> <span class="hljs-variable">been</span> <span class="hljs-variable">added</span> <span class="hljs-variable">to</span> <span class="hljs-variable">the</span> <span class="hljs-variable">default</span> <span class="hljs-variable">keys</span><br><span class="hljs-variable">Found</span> <span class="hljs-variable">Mifare</span> <span class="hljs-variable">Classic</span> <span class="hljs-number">1</span><span class="hljs-variable">k</span> <span class="hljs-variable">tag</span><br><span class="hljs-variable">ISO</span><span class="hljs-operator">/</span><span class="hljs-variable">IEC</span> <span class="hljs-number">14443</span><span class="hljs-variable">A</span> <span class="hljs-punctuation">(</span><span class="hljs-number">106</span> <span class="hljs-variable">kbps</span><span class="hljs-punctuation">)</span> <span class="hljs-variable">target</span><span class="hljs-operator">:</span><br>    <span class="hljs-variable">ATQA</span> <span class="hljs-punctuation">(</span><span class="hljs-type">SENS_RES</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-number">00</span>  <span class="hljs-number">04</span>  <br><span class="hljs-operator">*</span> <span class="hljs-variable">UID</span> <span class="hljs-variable">size</span><span class="hljs-operator">:</span> <span class="hljs-variable">single</span><br><span class="hljs-operator">*</span> <span class="hljs-variable">bit</span> <span class="hljs-variable">frame</span> <span class="hljs-variable">anticollision</span> <span class="hljs-variable">supported</span><br>       <span class="hljs-variable">UID</span> <span class="hljs-punctuation">(</span><span class="hljs-variable">NFCID1</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-variable">ff</span> <span class="hljs-variable">ff</span> <span class="hljs-variable">ff</span> <span class="hljs-variable">ff</span> <br>      <span class="hljs-variable">SAK</span> <span class="hljs-punctuation">(</span><span class="hljs-type">SEL_RES</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span> <span class="hljs-number">08</span>  <br><span class="hljs-operator">*</span> <span class="hljs-built_in">Not</span> <span class="hljs-variable">compliant</span> <span class="hljs-variable">with</span> <span class="hljs-variable">ISO</span><span class="hljs-operator">/</span><span class="hljs-variable">IEC</span> <span class="hljs-number">14443</span><span class="hljs-operator">-</span><span class="hljs-number">4</span><br><span class="hljs-operator">*</span> <span class="hljs-built_in">Not</span> <span class="hljs-variable">compliant</span> <span class="hljs-variable">with</span> <span class="hljs-variable">ISO</span><span class="hljs-operator">/</span><span class="hljs-variable">IEC</span> <span class="hljs-number">18092</span><br><span class="hljs-variable">Fingerprinting</span> <span class="hljs-variable">based</span> <span class="hljs-variable">on</span> <span class="hljs-variable">MIFARE</span> <span class="hljs-variable">type</span> <span class="hljs-variable">Identification</span> <span class="hljs-variable">Procedure</span><span class="hljs-operator">:</span><br><span class="hljs-operator">*</span> <span class="hljs-variable">MIFARE</span> <span class="hljs-variable">Classic</span> <span class="hljs-number">1</span><span class="hljs-built_in">K</span><br><span class="hljs-operator">*</span> <span class="hljs-variable">MIFARE</span> <span class="hljs-built_in">Plus</span> <span class="hljs-punctuation">(</span><span class="hljs-number">4</span> <span class="hljs-built_in">Byte</span> <span class="hljs-variable">UID</span> <span class="hljs-variable">or</span> <span class="hljs-number">4</span> <span class="hljs-built_in">Byte</span> <span class="hljs-variable">RID</span><span class="hljs-punctuation">)</span> <span class="hljs-number">2</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">Security</span> <span class="hljs-variable">level</span> <span class="hljs-number">1</span><br><span class="hljs-operator">*</span> <span class="hljs-variable">SmartMX</span> <span class="hljs-variable">with</span> <span class="hljs-variable">MIFARE</span> <span class="hljs-number">1</span><span class="hljs-built_in">K</span> <span class="hljs-variable">emulation</span><br><span class="hljs-variable">Other</span> <span class="hljs-variable">possible</span> <span class="hljs-variable">matches</span> <span class="hljs-variable">based</span> <span class="hljs-variable">on</span> <span class="hljs-variable">ATQA</span> <span class="hljs-operator">&amp;</span> <span class="hljs-variable">SAK</span> <span class="hljs-variable">values</span><span class="hljs-operator">:</span><br><span class="hljs-variable">Try</span> <span class="hljs-variable">to</span> <span class="hljs-variable">authenticate</span> <span class="hljs-variable">to</span> <span class="hljs-variable">all</span> <span class="hljs-variable">sectors</span> <span class="hljs-variable">with</span> <span class="hljs-variable">default</span> <span class="hljs-variable">keys</span><span class="hljs-operator">...</span><br><span class="hljs-variable">Symbols</span><span class="hljs-operator">:</span> <span class="hljs-operator">&#x27;.&#x27;</span> <span class="hljs-variable">no</span> <span class="hljs-variable">key</span> <span class="hljs-variable">found</span><span class="hljs-operator">,</span> <span class="hljs-operator">&#x27;/&#x27;</span> <span class="hljs-variable">A</span> <span class="hljs-variable">key</span> <span class="hljs-variable">found</span><span class="hljs-operator">,</span> <span class="hljs-operator">&#x27;</span>\<span class="hljs-operator">&#x27;</span> <span class="hljs-variable">B</span> <span class="hljs-variable">key</span> <span class="hljs-variable">found</span><span class="hljs-operator">,</span> <span class="hljs-operator">&#x27;</span><span class="hljs-variable">x</span><span class="hljs-operator">&#x27;</span> <span class="hljs-variable">both</span> <span class="hljs-variable">keys</span> <span class="hljs-variable">found</span><br><span class="hljs-punctuation">[</span><span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">xxxxxxxxxxxxxxxx</span><span class="hljs-punctuation">]</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">00</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">01</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">02</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">03</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">04</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">05</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">06</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">07</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">08</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">09</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">10</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">11</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">12</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">13</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">14</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br><span class="hljs-variable">Sector</span> <span class="hljs-number">15</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">A</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span> <span class="hljs-variable">Found</span>   <span class="hljs-built_in">Key</span> <span class="hljs-variable">B</span><span class="hljs-operator">:</span> <span class="hljs-variable">FFFFFFFFFFFF</span><br></code></pre></td></tr></table></figure><p>这里应该要安装一下mfoc，但kali也有预装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">hexdump</span> <span class="hljs-selector-tag">-C</span> <span class="hljs-selector-tag">source_dump</span><span class="hljs-selector-class">.mfd</span><br></code></pre></td></tr></table></figure><p>使用十六进制格式查看已经转储的文件</p><h3 id="02-转储数据写卡"><a href="#02-转储数据写卡" class="headerlink" title="02.转储数据写卡"></a>02.转储数据写卡</h3><p>改写之前的卡</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">mfoc -O dest.mfd <br>mfoc -O dest.mfd -k <span class="hljs-comment">&#123;the A key&#125;</span> <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nfc</span>-mfclassic w a dest.mfd source_dump.mfd<br><span class="hljs-attribute">NFC</span> reader: ACS / ACR<span class="hljs-number">122</span>U PICC Interface opened<br><span class="hljs-attribute">Found</span> MIFARE Classic card:<br><span class="hljs-attribute">ISO</span>/IEC <span class="hljs-number">14443</span>A (<span class="hljs-number">106</span> kbps) target:<br>    <span class="hljs-attribute">ATQA</span> (SENS_RES): <span class="hljs-number">00</span>  <span class="hljs-number">04</span>  <br>       <span class="hljs-attribute">UID</span> (NFCID<span class="hljs-number">1</span>): <span class="hljs-number">73</span>  <span class="hljs-number">98</span>  <span class="hljs-number">96</span>  d<span class="hljs-number">5</span>  <br>      <span class="hljs-attribute">SAK</span> (SEL_RES): <span class="hljs-number">08</span>  <br><span class="hljs-attribute">Guessing</span> size: seems to be a <span class="hljs-number">1024</span>-byte card<br><span class="hljs-attribute">Writing</span> <span class="hljs-number">64</span> blocks |x<br></code></pre></td></tr></table></figure><p>即可转储至新RFID卡中。</p><h3 id="03-数据分析"><a href="#03-数据分析" class="headerlink" title="03.数据分析"></a>03.数据分析</h3><p>离线小额支付（水卡等）的金额位一般是十进制对应的16进制数倒位，或对应的二进制数去补码再转化为16进制。基本前后对照都能看出。各个厂商的方式不同，并且有关支付的破解操作有法律风险，故不再深入破解。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​        acr122u与kali mfcuk的组合。基本可以实现市面上大多数半加密卡和部分全加密卡的密钥破解，数据读取和复制。而对于部分不在0扇区存储密钥的全加密卡，则需要通过Proxmark3等嗅探得到数据。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
